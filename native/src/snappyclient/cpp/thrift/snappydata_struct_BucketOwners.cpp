/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "snappydata_struct_BucketOwners.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace io { namespace snappydata { namespace thrift {


BucketOwners::~BucketOwners() noexcept {
}


void BucketOwners::__set_bucketId(const int32_t val) {
  this->bucketId = val;
}

void BucketOwners::__set_primary(const std::string& val) {
  this->primary = val;
__isset.primary = true;
}

void BucketOwners::__set_secondaries(const std::vector<std::string> & val) {
  this->secondaries = val;
__isset.secondaries = true;
}

uint32_t BucketOwners::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_bucketId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bucketId);
          isset_bucketId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->primary);
          this->__isset.primary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->secondaries.clear();
            uint32_t _size302;
            ::apache::thrift::protocol::TType _etype305;
            xfer += iprot->readListBegin(_etype305, _size302);
            this->secondaries.resize(_size302);
            uint32_t _i306;
            for (_i306 = 0; _i306 < _size302; ++_i306)
            {
              xfer += iprot->readString(this->secondaries[_i306]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.secondaries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_bucketId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BucketOwners::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BucketOwners");

  xfer += oprot->writeFieldBegin("bucketId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->bucketId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.primary) {
    xfer += oprot->writeFieldBegin("primary", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->primary);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.secondaries) {
    xfer += oprot->writeFieldBegin("secondaries", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->secondaries.size()));
      std::vector<std::string> ::const_iterator _iter307;
      for (_iter307 = this->secondaries.begin(); _iter307 != this->secondaries.end(); ++_iter307)
      {
        xfer += oprot->writeString((*_iter307));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BucketOwners &a, BucketOwners &b) {
  using ::std::swap;
  swap(a.bucketId, b.bucketId);
  swap(a.primary, b.primary);
  swap(a.secondaries, b.secondaries);
  swap(a.__isset, b.__isset);
}

BucketOwners::BucketOwners(const BucketOwners& other308) {
  bucketId = other308.bucketId;
  primary = other308.primary;
  secondaries = other308.secondaries;
  __isset = other308.__isset;
}
BucketOwners::BucketOwners( BucketOwners&& other309) noexcept {
  bucketId = std::move(other309.bucketId);
  primary = std::move(other309.primary);
  secondaries = std::move(other309.secondaries);
  __isset = std::move(other309.__isset);
}
BucketOwners& BucketOwners::operator=(const BucketOwners& other310) {
  bucketId = other310.bucketId;
  primary = other310.primary;
  secondaries = other310.secondaries;
  __isset = other310.__isset;
  return *this;
}
BucketOwners& BucketOwners::operator=(BucketOwners&& other311) noexcept {
  bucketId = std::move(other311.bucketId);
  primary = std::move(other311.primary);
  secondaries = std::move(other311.secondaries);
  __isset = std::move(other311.__isset);
  return *this;
}
void BucketOwners::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BucketOwners(";
  out << "bucketId=" << to_string(bucketId);
  out << ", " << "primary="; (__isset.primary ? (out << to_string(primary)) : (out << "<null>"));
  out << ", " << "secondaries="; (__isset.secondaries ? (out << to_string(secondaries)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
