/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "snappydata_struct_CatalogSchemaObject.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace io { namespace snappydata { namespace thrift {


CatalogSchemaObject::~CatalogSchemaObject() noexcept {
}


void CatalogSchemaObject::__set_name(const std::string& val) {
  this->name = val;
}

void CatalogSchemaObject::__set_description(const std::string& val) {
  this->description = val;
}

void CatalogSchemaObject::__set_locationUri(const std::string& val) {
  this->locationUri = val;
}

void CatalogSchemaObject::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
}

uint32_t CatalogSchemaObject::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_description = false;
  bool isset_locationUri = false;
  bool isset_properties = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          isset_description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locationUri);
          isset_locationUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
            uint32_t _size324;
            ::apache::thrift::protocol::TType _ktype325;
            ::apache::thrift::protocol::TType _vtype326;
            xfer += iprot->readMapBegin(_ktype325, _vtype326, _size324);
            uint32_t _i328;
            for (_i328 = 0; _i328 < _size324; ++_i328)
            {
              std::string _key329;
              xfer += iprot->readString(_key329);
              std::string& _val330 = this->properties[_key329];
              xfer += iprot->readString(_val330);
            }
            xfer += iprot->readMapEnd();
          }
          isset_properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_description)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_locationUri)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_properties)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CatalogSchemaObject::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CatalogSchemaObject");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locationUri", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->locationUri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
    std::map<std::string, std::string> ::const_iterator _iter331;
    for (_iter331 = this->properties.begin(); _iter331 != this->properties.end(); ++_iter331)
    {
      xfer += oprot->writeString(_iter331->first);
      xfer += oprot->writeString(_iter331->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CatalogSchemaObject &a, CatalogSchemaObject &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.locationUri, b.locationUri);
  swap(a.properties, b.properties);
}

CatalogSchemaObject::CatalogSchemaObject(const CatalogSchemaObject& other332) {
  name = other332.name;
  description = other332.description;
  locationUri = other332.locationUri;
  properties = other332.properties;
}
CatalogSchemaObject::CatalogSchemaObject( CatalogSchemaObject&& other333) noexcept {
  name = std::move(other333.name);
  description = std::move(other333.description);
  locationUri = std::move(other333.locationUri);
  properties = std::move(other333.properties);
}
CatalogSchemaObject& CatalogSchemaObject::operator=(const CatalogSchemaObject& other334) {
  name = other334.name;
  description = other334.description;
  locationUri = other334.locationUri;
  properties = other334.properties;
  return *this;
}
CatalogSchemaObject& CatalogSchemaObject::operator=(CatalogSchemaObject&& other335) noexcept {
  name = std::move(other335.name);
  description = std::move(other335.description);
  locationUri = std::move(other335.locationUri);
  properties = std::move(other335.properties);
  return *this;
}
void CatalogSchemaObject::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CatalogSchemaObject(";
  out << "name=" << to_string(name);
  out << ", " << "description=" << to_string(description);
  out << ", " << "locationUri=" << to_string(locationUri);
  out << ", " << "properties=" << to_string(properties);
  out << ")";
}

}}} // namespace
