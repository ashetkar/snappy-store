/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef SNAPPYDATA_STRUCT_CATALOGSTORAGE_H
#define SNAPPYDATA_STRUCT_CATALOGSTORAGE_H


#include "snappydata_struct_Decimal.h"
#include "snappydata_struct_BlobChunk.h"
#include "snappydata_struct_ClobChunk.h"
#include "snappydata_struct_TransactionXid.h"
#include "snappydata_struct_ServiceMetaData.h"
#include "snappydata_struct_ServiceMetaDataArgs.h"
#include "snappydata_struct_OpenConnectionArgs.h"
#include "snappydata_struct_ConnectionProperties.h"
#include "snappydata_struct_HostAddress.h"
#include "snappydata_struct_SnappyExceptionData.h"
#include "snappydata_struct_StatementAttrs.h"
#include "snappydata_struct_ColumnValue.h"
#include "snappydata_struct_ColumnDescriptor.h"
#include "snappydata_struct_Row.h"
#include "snappydata_struct_OutputParameter.h"
#include "snappydata_struct_RowSet.h"
#include "snappydata_struct_PrepareResult.h"
#include "snappydata_struct_UpdateResult.h"
#include "snappydata_struct_StatementResult.h"
#include "snappydata_struct_BucketOwners.h"

#include "snappydata_types.h"

namespace io { namespace snappydata { namespace thrift {

typedef struct _CatalogStorage__isset {
  _CatalogStorage__isset() : locationUri(false), inputFormat(false), outputFormat(false), serde(false) {}
  bool locationUri :1;
  bool inputFormat :1;
  bool outputFormat :1;
  bool serde :1;
} _CatalogStorage__isset;

class CatalogStorage {
 public:

  CatalogStorage(const CatalogStorage&);
  CatalogStorage(CatalogStorage&&) noexcept;
  CatalogStorage& operator=(const CatalogStorage&);
  CatalogStorage& operator=(CatalogStorage&&) noexcept;
  CatalogStorage() : compressed(0), locationUri(), inputFormat(), outputFormat(), serde() {
  }

  virtual ~CatalogStorage() noexcept;
  std::map<std::string, std::string>  properties;
  bool compressed;
  std::string locationUri;
  std::string inputFormat;
  std::string outputFormat;
  std::string serde;

  _CatalogStorage__isset __isset;

  void __set_properties(const std::map<std::string, std::string> & val);

  void __set_compressed(const bool val);

  void __set_locationUri(const std::string& val);

  void __set_inputFormat(const std::string& val);

  void __set_outputFormat(const std::string& val);

  void __set_serde(const std::string& val);

  bool operator == (const CatalogStorage & rhs) const
  {
    if (!(properties == rhs.properties))
      return false;
    if (!(compressed == rhs.compressed))
      return false;
    if (__isset.locationUri != rhs.__isset.locationUri)
      return false;
    else if (__isset.locationUri && !(locationUri == rhs.locationUri))
      return false;
    if (__isset.inputFormat != rhs.__isset.inputFormat)
      return false;
    else if (__isset.inputFormat && !(inputFormat == rhs.inputFormat))
      return false;
    if (__isset.outputFormat != rhs.__isset.outputFormat)
      return false;
    else if (__isset.outputFormat && !(outputFormat == rhs.outputFormat))
      return false;
    if (__isset.serde != rhs.__isset.serde)
      return false;
    else if (__isset.serde && !(serde == rhs.serde))
      return false;
    return true;
  }
  bool operator != (const CatalogStorage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatalogStorage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CatalogStorage &a, CatalogStorage &b);

inline std::ostream& operator<<(std::ostream& out, const CatalogStorage& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
