/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef SNAPPYDATA_STRUCT_CATALOGPARTITIONOBJECT_H
#define SNAPPYDATA_STRUCT_CATALOGPARTITIONOBJECT_H


#include "snappydata_struct_Decimal.h"
#include "snappydata_struct_BlobChunk.h"
#include "snappydata_struct_ClobChunk.h"
#include "snappydata_struct_TransactionXid.h"
#include "snappydata_struct_ServiceMetaData.h"
#include "snappydata_struct_ServiceMetaDataArgs.h"
#include "snappydata_struct_OpenConnectionArgs.h"
#include "snappydata_struct_ConnectionProperties.h"
#include "snappydata_struct_HostAddress.h"
#include "snappydata_struct_SnappyExceptionData.h"
#include "snappydata_struct_StatementAttrs.h"
#include "snappydata_struct_ColumnValue.h"
#include "snappydata_struct_ColumnDescriptor.h"
#include "snappydata_struct_Row.h"
#include "snappydata_struct_OutputParameter.h"
#include "snappydata_struct_RowSet.h"
#include "snappydata_struct_PrepareResult.h"
#include "snappydata_struct_UpdateResult.h"
#include "snappydata_struct_StatementResult.h"
#include "snappydata_struct_BucketOwners.h"
#include "snappydata_struct_CatalogStorage.h"
#include "snappydata_struct_CatalogSchemaObject.h"
#include "snappydata_struct_CatalogTableObject.h"
#include "snappydata_struct_CatalogFunctionObject.h"

#include "snappydata_types.h"

namespace io { namespace snappydata { namespace thrift {


class CatalogPartitionObject {
 public:

  CatalogPartitionObject(const CatalogPartitionObject&);
  CatalogPartitionObject(CatalogPartitionObject&&) noexcept;
  CatalogPartitionObject& operator=(const CatalogPartitionObject&);
  CatalogPartitionObject& operator=(CatalogPartitionObject&&) noexcept;
  CatalogPartitionObject() {
  }

  virtual ~CatalogPartitionObject() noexcept;
  std::map<std::string, std::string>  spec;
  CatalogStorage storage;
  std::map<std::string, std::string>  parameters;

  void __set_spec(const std::map<std::string, std::string> & val);

  void __set_storage(const CatalogStorage& val);

  void __set_parameters(const std::map<std::string, std::string> & val);

  bool operator == (const CatalogPartitionObject & rhs) const
  {
    if (!(spec == rhs.spec))
      return false;
    if (!(storage == rhs.storage))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    return true;
  }
  bool operator != (const CatalogPartitionObject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatalogPartitionObject & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CatalogPartitionObject &a, CatalogPartitionObject &b);

inline std::ostream& operator<<(std::ostream& out, const CatalogPartitionObject& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
