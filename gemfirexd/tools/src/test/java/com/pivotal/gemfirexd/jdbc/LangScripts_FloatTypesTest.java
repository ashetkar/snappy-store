/*
 * Copyright (c) 2010-2015 Pivotal Software, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */
package com.pivotal.gemfirexd.jdbc;

import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;

import org.apache.derbyTesting.junit.JDBC;

import com.gemstone.gemfire.cache.EntryExistsException;
import com.pivotal.gemfirexd.TestUtil;
import com.pivotal.gemfirexd.internal.engine.Misc;

import junit.framework.TestSuite;
import junit.textui.TestRunner;

public class LangScripts_FloatTypesTest extends JdbcTestBase {

  public static void main(String[] args) {
    TestRunner.run(new TestSuite(LangScripts_FloatTypesTest.class));
  }
  
  public LangScripts_FloatTypesTest(String name) {
    super(name); 
  }

  @Override
  protected String reduceLogging() {
    return "config";
  }

  // This test is the as-is LangScript conversion, without any partitioning clauses
  public void testLangScript_FloatTypesTestNoPartitioning() throws Exception
  {
    // This is a JUnit conversion of the Derby Lang floattypes.sql script
    // without any GemFireXD extensions
	  
    // Catch exceptions from illegal syntax
    // Tests still not fixed marked FIXME
	  
    // Array of SQL text to execute and sqlstates to expect
    // The first object is a String, the second is either 
    // 1) null - this means query returns no rows and throws no exceptions
    // 2) a string - this means query returns no rows and throws expected SQLSTATE
    // 3) a String array - this means query returns rows which must match (unordered) given resultset
    //       - for an empty result set, an uninitialized size [0][0] array is used
    Object[][] Script_FloatTypesUT = {
	// Test DECIMAL and NUMERIC.  Note that we know that DECIMAL and NUMERIC are pretty much the same thing
	{ "create table tmp (tmpcoldecimal dec(8,4), tmpcolnumeric numeric)" + getOffHeapSuffix(), null },
	{ "select columndatatype from sys.syscolumns where CAST(columnname AS VARCHAR(128)) like 'TMPCOL%'", new String[][] {
		{"DECIMAL(8,4)"},{"NUMERIC(38,0)"} } },    // GemFireXD maps NUMERIC to precision 38, not 5 (Derby's mapping)
	{ "drop table tmp", null },
	// Negative tests, bad precision/scale
	{ "create table bad (d decimal(11,12))"+ getOffHeapSuffix(), "42Y43" },
	{ "create table bad (d decimal(0,0))"+ getOffHeapSuffix(), "42X48" },
	{ "create table bad (d decimal(0))"+ getOffHeapSuffix(), "42X48" },
	{ "drop table if exists bade", null },
	{ "create table bade(d decimal(32))"+ getOffHeapSuffix(), null },		// GemFireXD allows decimal with precision > 31 up to 128
	{ "create table bade(d decimal(31,32))"+ getOffHeapSuffix(), "42Y43" },
	{ "drop table if exists bade2", null },
	{ "create table bade2(d decimal(32,32))"+ getOffHeapSuffix(), null },
	{ "values cast (1 as dec)", new String[][] { {"1"} } },
	{ "values cast (1 as decimal)", new String[][] { {"1"} } },
	{ "values cast (1 as decimal(5))", new String[][] { {"1"} } },
	{ "values cast (1 as dec(5))", new String[][] { {"1"} } },
	{ "values cast (1.1 as dec(5,3))", new String[][] { {"1.100"} } },
	{ "values cast (1.1 as numeric(5,3))", new String[][] { {"1.100"} } },
	{ "values cast (1.1 as int)", new String[][] { {"1"} } },
	{ "values cast (1.1 as bigint)", new String[][] { {"1"} } },
	{ "values cast (1.1 as smallint)", new String[][] { {"1"} } },
	{ "values cast (1.1 as real)", new String[][] { {"1.1"} } },
	{ "values cast (1.1 as float)", new String[][] { {"1.1"} } },
	{ "values cast (1.1 as char(10))", new String[][] { {"1.1"} } },
	{ "values cast ((cast (1 as int)) as dec)", new String[][] { {"1"} } },
	{ "values cast ((cast (1 as bigint)) as dec)", new String[][] { {"1"} } },
	{ "values cast ((cast (1 as smallint)) as dec)", new String[][] { {"1"} } },
	{ "values cast ((cast (1 as real)) as dec)", new String[][] { {"1"} } },
	{ "values cast ((cast (1 as float)) as dec)", new String[][] { {"1"} } },
	{ "values cast ((cast (1 as char(10))) as dec)", new String[][] { {"1"} } },
	{ "create table tmp(d decimal(31 ,0))"+ getOffHeapSuffix(), null },
	{ "insert into tmp values (cast ('100000000000000000000000000000' as dec(31,0)))", null },
	{ "update tmp set d = d * d", "22003" },
	{ "select cast(d as int) from tmp", "22003" },
	{ "select cast(d as smallint) from tmp", "22003" },
	{ "select cast(d as bigint) from tmp", "22003" },
	{ "select cast(d as float) from tmp", new String[][] { {"1.0E29"} } },
	{ "select cast(d as real) from tmp", new String[][] { {"1.0E29"} } },
	{ "select cast(d as double precision) from tmp", new String[][] { {"1.0E29"} } },
	{ "select cast(d as double) from tmp", new String[][] { {"1.0E29"} } },
	{ "insert into tmp values (+1.79769E+308)", "22003" },
	{ "select * from tmp", new String[][] { {"100000000000000000000000000000"} } },
	{ "drop table tmp", null },
	{ "create table tmp (d decimal(5,2))"+ getOffHeapSuffix(), null },
	{ "insert into tmp values (100)", null },
	{ "insert into tmp values (cast (100 as smallint))", null },
	{ "insert into tmp values (cast (100 as bigint))", null },
	{ "insert into tmp values (cast (100 as real))", null },
	{ "insert into tmp values (cast (100 as double precision))", null },
	{ "insert into tmp values (cast (100.999 as real))", null },
	{ "insert into tmp values (100.999e0)", null },
	{ "insert into tmp values (100.999)", null },
	{ "insert into tmp values (1000)", "22003" },
	{ "insert into tmp values (cast (1000 as smallint))", "22003" },
	{ "insert into tmp values (cast (1000 as bigint))", "22003" },
	{ "insert into tmp values (cast (1000 as real))", "22003" },
	{ "insert into tmp values (cast (1000 as double precision))", "22003" },
	{ "insert into tmp values (cast (1000.999 as real))", "22003" },
	{ "insert into tmp values (1000.999e0)", "22003" },
	{ "insert into tmp values (1000.999)", "22003" },
	{ "insert into tmp values (1000)", "22003" },
	{ "insert into tmp values (10000)", "22003" },
	{ "insert into tmp values (100000)", "22003" },
	{ "insert into tmp values (1000000)", "22003" },
	{ "insert into tmp values (10000000)", "22003" },
	{ "insert into tmp values (100000000)", "22003" },
	{ "insert into tmp values (1000000000)", "22003" },
	{ "insert into tmp values (10000000000)", "22003" },
	{ "insert into tmp values (100000000000)", "22003" },
	{ "insert into tmp values (1000000000000)", "22003" },
	{ "insert into tmp values (10000000000000)", "22003" },
	{ "insert into tmp values (100000000000000)", "22003" },
	{ "insert into tmp values (-1000)", "22003" },
	{ "insert into tmp values (-10000)", "22003" },
	{ "insert into tmp values (-100000)", "22003" },
	{ "insert into tmp values (-1000000)", "22003" },
	{ "insert into tmp values (-10000000)", "22003" },
	{ "insert into tmp values (-100000000)", "22003" },
	{ "insert into tmp values (-1000000000)", "22003" },
	{ "insert into tmp values (-10000000000)", "22003" },
	{ "insert into tmp values (-100000000000)", "22003" },
	{ "insert into tmp values (-1000000000000)", "22003" },
	{ "insert into tmp values (-10000000000000)", "22003" },
	{ "insert into tmp values (-100000000000000)", "22003" },
	{ "drop table tmp", null },
	{ "create table tmp(d dec(1,1))"+ getOffHeapSuffix(), null },
	{ "insert into tmp values (0.0)", null },
	{ "insert into tmp values (-0.0)", null },
	{ "insert into tmp values (0.1)", null },
	{ "insert into tmp values (-0.1)", null },
	{ "insert into tmp values (0.1e0)", null },
	{ "insert into tmp values (-0.1e0)", null },
	{ "select * from tmp", new String[][] { {"0.0"},{"0.0"},{"0.1"},{"-0.1"},{"0.1"},{"-0.1"} } },
	{ "delete from tmp", null },
	{ "drop table tmp", null },
	{ "drop table if exists tmp2", null },
	{ "create table tmp2(d dec(1,1))"+ getOffHeapSuffix(), null },
	{ "insert into tmp2 values (0)", null },
	{ "insert into tmp2 values (0.0e0)", null },
	{ "insert into tmp2 values (0.0e10)", null },
	{ "insert into tmp2 values (-0)", null },
	{ "insert into tmp2 values (-0.0e0)", null },
	{ "insert into tmp2 values (-0.0e10)", null },
	{ "insert into tmp2 values (cast (0 as smallint))", null },
	{ "insert into tmp2 values (cast (0 as bigint))", null },
	{ "insert into tmp2 values (cast (0 as real))", null },
	{ "select * from tmp2", new String[][] { {"0.0"},{"0.0"},{"0.0"},{"0.0"},{"0.0"},{"0.0"},{"0.0"},{"0.0"},{"0.0"} } },
	{ "drop table tmp2", null },
	{ "create table tmp(d dec(1,0))"+ getOffHeapSuffix(), null },
	{ "insert into tmp values (1.0)", null },
	{ "insert into tmp values (1)", null },
	{ "insert into tmp values (1.0e0)", null },
	{ "insert into tmp values (-1.0)", null },
	{ "insert into tmp values (-1)", null },
	{ "insert into tmp values (-1.0e0)", null },
	{ "insert into tmp values (cast (1 as smallint))", null },
	{ "insert into tmp values (cast (1 as bigint))", null },
	{ "insert into tmp values (cast (1 as real))", null },
	{ "select * from tmp", new String[][] { {"1"},{"1"},{"1"},{"-1"},{"-1"},{"-1"},{"1"},{"1"},{"1"} } },
	{ "drop table tmp", null },
	{ "create table tmp (x double)"+ getOffHeapSuffix(), null },
	{ "insert into tmp values (1)", null },
	{ "select columnname, columndatatype from sys.syscolumns c, sys.systables t where c.referenceid = t .tableid and CAST(t.tablename AS VARCHAR(128)) ='TMP'", new String [][] { {"X","DOUBLE"} } },
	{ "drop table tmp", null },
	{ "create table tmp (d decimal)"+ getOffHeapSuffix(), null },
	{ "insert into tmp values (1.1)", null },
	{ "insert into tmp values (1)", null },
	{ "select cast(d as int) from tmp", new String [][] { {"1"},{"1"} } },
	{ "select cast(d as smallint) from tmp", new String [][] { {"1"},{"1"} } },
	{ "select cast(d as bigint) from tmp", new String [][] { {"1"},{"1"} } },
	{ "select cast(d as float) from tmp", new String[][] { {"1.0"},{"1.0"} } },
	{ "select cast(d as real) from tmp", new String[][] { {"1.0"},{"1.0"} } },
	{ "select cast(d as double precision) from tmp", new String[][] { {"1.0"},{"1.0"} } },
	{ "select cast(d as dec(10,2)) from tmp", new String[][] { {"1.00"},{"1.00"} } },
	{ "select cast(d as dec(10,8)) from tmp", new String[][] { {"1.00000000"},{"1.00000000"} } },
	{ "drop table tmp", null },
	{ "drop table if exists t", null },
	{ "create table t (i int, l bigint,s smallint, d double precision,r real,dc decimal(10,2))"+ getOffHeapSuffix(), null },
	{ "insert into t values (null, null, null, null, null, null)", null },
	{ "insert into t values (10,10,10,10,10,10)", null },
	{ "insert into t values (-10,-10,-10,-10,-10,-10)", null },
	{ "insert into t values (0,0,0,0,0,0)", null },
	{ "select dc from t", new String[][] { {null},{"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc + i, dc + s, dc + r, dc + dc from t", new String[][] {
		{null,null,null,null},
		{"20.00","20.00","20.0","20.00"},
		{"-20.00","-20.00","-20.0","-20.00"},
		{"0.00","0.00","0.0","0.00"} } },
	{ "select dc - i, dc - s, dc - r, dc - dc from t", new String[][] {
		{null,null,null,null},
		{"0.00","0.00","0.0","0.00"},
		{"0.00","0.00","0.0","0.00"},
		{"0.00","0.00","0.0","0.00"} } },
	{ "select dc * i, dc * s, dc * r, dc * dc from t", new String [][] {
		{null,null,null,null},
		{"100.00","100.00","100.0","100.0000"},
		{"100.00","100.00","100.0","100.0000"},
		{"0.00","0.00","0.0","0.0000"} } },
	{ "select dc / i, dc / s, dc / r, dc / dc from t", "22012" },
	{ "select -(dc * 100 / 100e0 ), +(dc * 100e0 / 100 ) from t", new String[][] {
		{null,null},{"-10.0","10.0"},{"10.0","-10.0"},{"0.0","0.0"} } },
	{ "select dc, i / dc, 10 / dc, dc / 10e0 from t", "22012" },
	{ "select dc / i from t", "22012" },
	{ "select 20e0 / 5e0 / 4e0, 20e0 / 4e0 / 5 from t", new String[][] {
		{"1.0","1.0"},{"1.0","1.0"},{"1.0","1.0"},{"1.0","1.0"} } },
	{ "select dc, dc / -dc, (-dc) / dc, (-dc) / -dc from t", "22012" },
	//FIXME
	// This throws an invalid cast exception (22018)
	//{ "select dc, dc + 10e0, dc - (10 - 20e0), dc - 10, dc - (20 - 10) from t", new String[][] {
	//	{null,null,null,null,null},
	//	{"10.00","20.0","20.0","0.00","0.00"},
	//	{"-10.00","0.0","0.0","-20.00","-20.00"},
	//	{"0.00","10.0","10.0","-10.00","-10.00"} } },
	{ "values (9.0 + 9.0)", new String[][] { {"18.0"} } },
	{ "values (9.9 + 9.9)", new String[][] { {"19.8"} } },
	{ "values (-9.0 - 9.0)", new String[][] { {"-18.0"} } },
	{ "values (-9.9 - 9.9)", new String[][] { {"-19.8"} } },
	{ "values (9.0 * 9.0)", new String[][] { {"81.00"} } },
	{ "values (9.9 * 9.9)", new String[][] { {"98.01"} } },
	{ "values (0.9 * 0.9)", new String[][] { {"0.81"} } },
	{ "values (0.9999 * 0.9)", new String[][] { {"0.89991"} } },
	{ "values (0.9 * 0.9999)", new String[][] { {"0.89991"} } },
	{ "values (0.9999 * 0.9999)", new String[][] { {"0.99980001"} } },
	{ "values (1.0 / 3.0)", new String[][] { {"0.3333"} } },         // Derby has more precision than GFXD for division here
	{ "values (1.0 / 0.3)", new String[][] { {"3.3333"} } },
	{ "values (1.0 / 0.03)", new String[][] { {"33.3333"} } },
	{ "values (1.0 / 0.000003)", new String[][] { {"333333.333333"} } },
	{ "values (10000.0 / 0.000003)", new String[][] { { "3333333333.333333"} } },
	{ "values (0.0001 / 0.0003)", new String[][] { {"0.3333"} } },
	{ "values (0.1 / 3.0)", new String[][] { {"0.0333"} } },
	{ "values (cast(1.7e3 as dec(31)) *cast(1.7e3 as dec(31)) *cast(1.7e3 as dec(31)) *cast(1.7e3 as dec(31)) *cast(1.7e3 as dec(31)) *cast(1.7e3 as dec(31)) *cast(1.7e3 as dec(31)) *cast(1.7e3 as dec(31)))", new String[][] { {"69757574410000000000000000"} } },
	{ "values cast(1.7e30 as dec(31))", new String[][] { {"1700000000000000000000000000000"} } },
	{ "values cast(1 as dec(31, 20))", new String[][] { {"1.00000000000000000000"} } },
	{ "drop table if exists w", null },
	{ "create table w (x dec, y long varchar)"+ getOffHeapSuffix(), null },
	{ "select x + y from w", "42846" },
	{ "select x - y from w", "42846" },
	{ "select x * y from w", "42846" },
	{ "select x / y from w", "42846" },
	{ "drop table w", null },
	// comparisons
	{ "insert into t values (123, 123, 123, 1234.56, 1234.56, 1234.56)", null },
	{ "select dc from t where dc is null", new String[][] { {null} } },
	{ "select dc from t where dc = 10", new String[][] { {"10.00"} } },
	{ "select dc from t where dc = -10", new String[][] { {"-10.00"} } },
	{ "select dc from t where dc = 0", new String[][] { {"0.00"} } },
	{ "select dc from t where dc = 1234.45", new String[0][0] },
	{ "select dc from t where dc = i", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc = l", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc = s", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc = r", new String[][] { {"10.00"},{"-10.00"},{"0.00"}, {"1234.56"} } },
	{ "select dc from t where dc = d", new String[][] { {"10.00"},{"-10.00"},{"0.00"}, {"1234.56"} } },
	{ "select dc from t where dc = dc", new String[][] { {"10.00"},{"-10.00"},{"0.00"}, {"1234.56"} } },
	{ "select dc from t where dc > 10", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc > -10", new String[][] { {"10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc > 0", new String[][] { {"10.00"},{"1234.56"} } },
	{ "select dc from t where dc > 1234.45", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc > i", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc > l", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc > s", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc > r", new String[0][0] },
	{ "select dc from t where dc > d", new String[0][0] },
	{ "select dc from t where dc > dc", new String[0][0] },
	{ "select dc from t where dc >= 10", new String[][] { {"10.00"},{"1234.56"} } },
	{ "select dc from t where dc >= -10", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc >= 0", new String[][] { {"10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc >= 1234.45", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc >= i", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc >= l", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc >= s", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc >= r", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc >= d", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc >= dc", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc < 10", new String[][] { {"-10.00"},{"0.00"} } },
	{ "select dc from t where dc < -10", new String[0][0] },
	{ "select dc from t where dc < 0", new String[][] { {"-10.00"} } },
	{ "select dc from t where dc < 1234.45", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc < i", new String[0][0] },
	{ "select dc from t where dc < l", new String[0][0] },
	{ "select dc from t where dc < s", new String[0][0] },
	{ "select dc from t where dc < r", new String[0][0] },
	{ "select dc from t where dc < d", new String[0][0] },
	{ "select dc from t where dc < dc", new String[0][0] },
	{ "select dc from t where dc <= 10", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc <= -10", new String[][] { {"-10.00"} } },
	{ "select dc from t where dc <= 0", new String[][] { {"-10.00"},{"0.00"} } },
	{ "select dc from t where dc <= 1234.45", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc <= i", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc <= l", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc <= s", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc <= r", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc <= d", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc <= dc", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc <> 10", new String[][] { {"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc <> -10", new String[][] { {"10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc <> 0", new String[][] { {"10.00"},{"-10.00"},{"1234.56"} } },
	{ "select dc from t where dc <> 1234.45", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc <> i", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc <> l", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc <> s", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc <> r", new String[0][0] },
	{ "select dc from t where dc <> d", new String[0][0] },
	{ "select dc from t where dc <> dc", new String[0][0] },
	// test a variety of inserts and updates
	{ "drop table if exists t2", null },
	{ "create table t2 (i int, l bigint,	s smallint, d double precision,	r real, dc decimal(10,2))"+ getOffHeapSuffix(), null },
	{ "insert into t2 select * from t", null },
	{ "create index dcindex on t2(dc)", null },
	{ "create unique index dcuniqueindex on t2(dc)", null },
	{ "update t2 set dc = dc + 1.1", null },
	{ "select dc from t2", new String[][] { {"-8.90"},{"1.10"},{"11.10"},{"1235.66"}, {null} } },
	{ "update t2 set dc = dc - 1.1", null },
	{ "select dc from t2", new String[][] { {"-10.00"},{"0.00"},{"10.00"},{"1234.56"}, {null} } },
	{ "update t2 set dc = dc / 1.1", null },
	{ "select dc from t2", new String[][] { {"-9.09"},{"0.00"},{"9.09"},{"1122.32"},{null} } },
	{ "update t2 set dc = dc * 1.1", null },
	{ "select dc from t2", new String[][] { {"-9.99"},{"0.00"},{"9.99"},{"1234.55"},{null} } },
	{ "delete from t2 where dc > 0", null },
	{ "select dc from t2", new String[][] { {"-9.99"},{"0.00"},{null} } },
	{ "delete from t2 where dc = 0", null },
	{ "select dc from t2", new String[][] { {"-9.99"},{null} } },
	{ "delete from t2 where dc < 0", null },
	{ "select dc from t2", new String[][] { {null} } },
	{ "drop table t2", null },
	{ "drop table t", null },
	{ "create table t (c1 char(1), d dec(20,4), c2 char(1))"+ getOffHeapSuffix(), null },
	{ "create unique index tu on t(d)", null },
	{ "insert into t values ('a', 1.123, 'Z')", null },
	{ "insert into t values ('a', 11111.123, 'Z')", null },
	{ "insert into t values ('a', 11111111.123, 'Z')", null },
	{ "insert into t values ('a', 6.123, 'Z')", null },
	{ "insert into t values ('a', 666.123, 'Z')", null },
	{ "insert into t values ('a', .6, 'Z')", null },
	{ "insert into t values ('a', 0, 'Z')", null },
	{ "insert into t values ('a', 666666.123, 'Z')", null },
	{ "insert into t values ('a', 99999999999999.123, 'Z')", null },
	{ "insert into t values ('a', 9.123, 'Z')", null },
	{ "select * from t", new String[][] {
		{"a", "1.1230", "Z"},
		{"a", "11111.1230", "Z"},
		{"a","11111111.1230","Z"},  
		{"a","6.1230","Z"},
		{"a","666.1230","Z"},
		{"a","0.6000","Z"},
		{"a","0.0000","Z"},
		{"a","666666.1230","Z"},
		{"a","99999999999999.1230","Z"},
		{"a","9.1230","Z"} } },
	{ "update t set d = d + .0007", null },
	{ "select * from t", new String[][] { 
		{"a", "1.1237", "Z"},
		{"a", "11111.1237", "Z"},
		{"a","11111111.1237","Z"},  
		{"a","6.1237","Z"},
		{"a","666.1237","Z"},
		{"a","0.6007","Z"},
		{"a","0.0007","Z"},
		{"a","666666.1237","Z"},
		{"a","99999999999999.1237","Z"},
		{"a","9.1237","Z"} } },
	{ "drop table t", null },
	// Test double
	{ "create table t (i int, s smallint, c char(10), v varchar(50),d double precision)"+ getOffHeapSuffix(), null },
	{ "insert into t values (null, null, null, null, null)", null },
	{ "insert into t values (0, 100, 'hello', 'everyone is here', 200.0e0)", null },
	{ "insert into t values (-1, -100, 'goodbye', 'everyone is there', -200.0e0)", null },
	{ "select d + d, i + d, s + d from t", new String[][] {
		{null,null,null},{"400.0","200.0","300.0"},{"-400.0","-201.0","-300.0"} } },
	{ "select d + d + d, d + 100 + 432e0 from t", new String[][] {
		{null,null},{"600.0","732.0"},{"-600.0","332.0"} } },
	{ "select d - i, i - d, d - s, s - d from t", new String[][] {
		{null,null,null,null},
		{"200.0","-200.0","100.0","-100.0"},
		{"-199.0","199.0","-100.0","100.0"} } },
	{ "select d - d - d, d - 100 - 432e0 from t", new String[][] {
		{null,null},{"-200.0","-332.0"},{"200.0","-732.0"} } },
	{ "select i, d, i * d, d * i, d * d, d * 2, d * 2.0e0 from t", new String[][] {
		{null,null,null,null,null,null,null},
		{"0","200.0","0.0","0.0","40000.0","400.0","400.0"},
		{"-1","-200.0","200.0","200.0","40000.0","-400.0","-400.0"} } },
	{ "select -(d * 100 / 100e0 ), +(d * 100e0 / 100 ) from t", new String[][] {
		{null,null},{"-200.0","200.0"},{"200.0","-200.0"} } },
	{ "select i, d, CAST (i / d AS DECIMAL(6,5)), 10 / d, d / 10e0 from t", new String[][] {
		{null,null,null,null,null},
		{"0","200.0","0.00000","0.05","20.0"},
		{"-1","-200.0","0.00500","-0.05","-20.0"} } },
	{ "select d / i from t", "22012" },
	{ "select 20e0 / 5e0 / 4e0, 20e0 / 4e0 / 5 from t", new String[][] {
		{"1.0","1.0"}, {"1.0","1.0"}, {"1.0","1.0"} } },
	{ "select d, d / -d, (-d) / d, (-d) / -d from t", new String[][] {
		{null,null,null,null},
		{"200.0","-1.0","-1.0","1.0"},
		{"-200.0","-1.0","-1.0","1.0"} } },
	{ "select d+1.1 from t", new String[][] { {null},{"201.1"},{"-198.9"} } },
	{ "insert into t (d) values(1.1)", null },
	{ "select d from t where d=1.1", new String[][] { {"1.1"} } },
	{ "drop table t", null },
	// test overflow
	{ "drop table if exists s", null },
	{ "create table s (d double precision, p double)"+ getOffHeapSuffix(), null },
	{ "insert into s values (null, null)", null },
	{ "insert into s values (0, 100)", null },
	{ "insert into s values (1, 101)", null },
	{ "select d + 1.7e+308 from s", new String[][] { {null},{"1.7E308"},{"1.7E308"} } },
	{ "select 1.798e+308, - 1.798e+308, 'This query should not work' from s", "22003" },
	{ "select 1.8e+1000, - 1.8e+1000, 'This query should not work' from s", "22003" },
	{ "select 1.797e+308, - 1.797e+308, 'This query should work' from s", new String[][] {
		{"1.797E308","-1.797E308","This query should work"},
		{"1.797E308","-1.797E308","This query should work"},	
		{"1.797E308","-1.797E308","This query should work"} } },
	{ "select 1.6e+308, - 1.6e+308, 'This query should work' from s", new String[][] {
		{"1.6E308","-1.6E308","This query should work"},
		{"1.6E308","-1.6E308","This query should work"},	
		{"1.6E308","-1.6E308","This query should work"} } },
	{ "select d - 1.6e+308 - 0, 'This query should work' from s", new String[][] {
		{null,"This query should work"},
		{"-1.6E308","This query should work"},
		{"-1.6E308","This query should work"} } },
	{ "select d - 1.6e+308 - 1.6e+308, 'This query should fail' from s", "22003" },
	{ "select p * 1.6e+308 from s", "22003" },
	{ "select p * -1.6e+308 from s", "22003" },
	{ "insert into s values (-1.6e+308, 0)", null },
	{ "insert into s values (-1.797e+308, 0)", null },
	{ "insert into s values (-1.798e+308, 0)", "22003" },
	{ "insert into s values (-1.8e+308, 0)", "22003" },
	{ "select -d from s", new String[][] { {null},{"0.0"},{"-1.0"},{"1.6E308"},{"1.797E308"} } },
	{ "drop table s", null },
	{ "create table w (x double precision, y long varchar)"+ getOffHeapSuffix(), null },
	{ "select x + y from w", "42846" },
	{ "select x - y from w", "42846" },
	{ "select x * y from w", "42846" },
	{ "select x / y from w", "42846" },
	{ "drop table w", null },
	//comparisons
	{ "drop table if exists c", null },
	{ "create table c (i int, s smallint, d double precision, p double precision)"+ getOffHeapSuffix(), null },
	{ "insert into c values (0, 0, 0e0, 0e0)", null },
	{ "insert into c values (null, null, 5e0, null)", null },
	{ "insert into c values (1, 1, 1e0, 2e0)", null },
	{ "insert into c values (1956475, 1956, 1956475e0, 1956475e0)", null },
	{ "select d from c where d = 0e0", new String[][] { {"0.0"} } },
	{ "select d from c where d = 1e0", new String[][] { {"1.0"} } },
	{ "select d from c where d = 1956475e0", new String[][] { {"1956475.0"} } },
	{ "select d from c where p = 2e0", new String[][] { {"1.0"} } },
	{ "select d from c where d = d", new String[][] { {"0.0"},{"5.0"},{"1.0"},{"1956475.0"} } },
	{ "select d from c where d <> 0e0", new String[][] { {"5.0"},{"1.0"},{"1956475.0"} } },
	{ "select d from c where d <> 1e0", new String[][] { {"0.0"},{"5.0"},{"1956475.0"} } },
	{ "select d from c where d < 1956475e0", new String[][] { {"0.0"},{"5.0"},{"1.0"} } },
	{ "select d from c where d < 2e0", new String[][] { {"0.0"},{"1.0"} } },
	{ "select d from c where d > d", new String[0][0] },
	{ "select d from c where d > p", new String[0][0] },
	{ "select d from c where d <= 0e0", new String[][] { {"0.0"} } },
	{ "select d from c where d <= 1e0", new String[][] { {"0.0"},{"1.0"} } },
	{ "select d from c where d <= 2e0", new String[][] { {"0.0"},{"1.0"} } },
	{ "select d from c where d >= 1956475e0", new String[][] { {"1956475.0"} } },
	{ "select d from c where d >= d", new String[][] { {"0.0"},{"5.0"},{"1.0"},{"1956475.0"} } },
	{ "select d from c where d >= p", new String[][] { {"0.0"},{"1956475.0"} } },
	{ "select d from c where d <= i", new String[][] { {"0.0"},{"1.0"},{"1956475.0"} } },
	{ "select d from c where d < s", new String[0][0] },
	{ "select d from c where d > i", new String[0][0] },
	{ "select d from c where d >= s", new String[][] { {"0.0"},{"1.0"},{"1956475.0"} } },
	{ "select d from c where d <> i", new String[0][0] },
	{ "select d from c where d = s", new String[][] { {"0.0"},{"1.0"} } },
	//FIXME
	// SQLfire throws cast exception 22003 for this
	//{ "select d from c where s = 65537e0", new String[0][0] },
	{ "select d from c where d = (select d from c)", "21000" },
	{ "select d from c where d = (select d from c where d=5)", new String[][] { {"5.0"} } },
	{ "drop table if exists o", null },
	{ "create table o (c char(10), v varchar(30), dc decimal)"+ getOffHeapSuffix(), null },
	{ "select d from c,o where d <> dc", new String[0][0] },
	{ "drop table c", null },
	{ "drop table o", null },
	//test a variety of inserts and updates
	{ "drop table if exists source", null },
	{ "drop table if exists target", null },
	{ "create table source (i int, s smallint, c char(10), v varchar(50),	d double precision)"+ getOffHeapSuffix(), null },
	{ "create table target (p double precision not null)"+ getOffHeapSuffix(), null },
	{ "insert into source values (1, 2, '3', '4', 5)", null },
	{ "insert into target select i from source", null },
	{ "insert into target select s from source", null },
	{ "insert into target select d from source", null },
	{ "delete from source", null },
	{ "insert into source values (null, null, null, null, null)", null },
	{ "insert into target values(null)", "23502" },
	{ "insert into target select i from source", "23502" },
	{ "insert into target select s from source", "23502" },
	{ "insert into target select d from source", "23502" },
	{ "select * from target", new String[][] { {"1.0"},{"2.0"},{"5.0"} } },
	{ "update target set p = p + 1", null },
	{ "select * from target", new String[][] { {"2.0"},{"3.0"},{"6.0"} } },
	{ "update target set p = p - 1", null },
	{ "select * from target", new String[][] { {"1.0"},{"2.0"},{"5.0"} } },
	{ "update target set p = p / 10", null },
	{ "select * from target", new String[][] { {"0.1"},{"0.2"},{"0.5"} } },
	{ "update target set p = p * 10", null },
	{ "select * from target", new String[][] { {"1.0"},{"2.0"},{"5.0"} } },
	{ "update source set i = 1.4e8", null },
	{ "update source set s = 1.4e4", null },
	// FIXME
	// GemFireXD throws cast exception 22018 here
	//{ "select i, s from source where i=1.4e8 or s=1.4e4", new String[][] { {"140000000","14000"} } },
	{ "update source set i = 1.4e12", "22003" },
	{ "update source set s = 1.4e12", "22003" },
	{ "drop table source", null },
	{ "drop table target", null },
	{ "drop table if exists abcfloat", null },
	{ "create table abcfloat (numtest float(20))"+ getOffHeapSuffix(), null },
	{ "insert into abcfloat values (1.23456789)", null },
	{ "insert into abcfloat values (.123456789)", null },
	{ "insert into abcfloat values (-.123456789)", null },
	{ "insert into abcfloat values (0.223456789)", null },
	{ "insert into abcfloat values (-0.223456789)", null },
	{ "insert into abcfloat values (12345678.9)", null },
	{ "select * from abcfloat", new String[][] {
		{"1.2345679"},{"0.12345679"},{"-0.12345679"},{"0.22345679"},{"-0.22345679"},{"1.2345679E7"} } },
	{ "drop table abcfloat", null },
	// Test float
	{ "create table t (d double precision, r real, f float, f1 float(1),	f23 float(23), f24 float(24), f53 float(52))"+ getOffHeapSuffix(), null },
	{ "select columnname, columndatatype from sys.syscolumns c, sys.systables t where c.referenceid = t.tableid and CAST(t.tablename AS VARCHAR(128)) ='T'", new String[][] {
		{"D","DOUBLE"},{"F","DOUBLE"},{"F1","REAL"},{"F23","REAL"},{"F24","DOUBLE"},{"F53","DOUBLE"},{"R","REAL"} } },
	{ "insert into t(r) values 'NaN'", "42821" },   //Derby expected data type mismatch, GemFireXD throws out-of-range, same difference
	{ "insert into t(r) values +3.4021E+38", "22003" },
	{ "insert into t(r) values -3.4021E+38", "22003" },
	{ "drop table if exists tt", null },
	{ "create table tt(c char(254))"+ getOffHeapSuffix(), null },
	{ "insert into tt values -3.402E+38", "42821" },
	{ "insert into t(r) select * from tt", "42821" },
	{ "insert into t(r) values '1.0'", "42821" },
	{ "update t set r = NaN", "42X04" },
	{ "update t set r = +3.4021E+38", null },
	{ "update t set r = -3.4021E+38", null },
	{ "drop table t", null },
	{ "drop table tt", null },
	{ "drop table if exists t1", null },
	{ "drop table if exists t2", null },
	{ "drop table if exists t3", null },
	{ "drop table if exists t4", null },
	{ "drop table if exists t5", null },
	{ "drop table if exists t6", null },
	{ "create table t1 (d double precision, r real, f float(-10))"+ getOffHeapSuffix(), "42X01" },
	{ "create table t2 (d double precision, r real, f float(-1))"+ getOffHeapSuffix(), "42X01" },
	{ "create table t3 (d double precision, r real, f float(0))"+ getOffHeapSuffix(), "42X48" },
	{ "create table t4 (d double precision, r real, f float(100))"+ getOffHeapSuffix(), "42X48" },
	{ "create table t5 (d double precision, r real, f float(53))"+ getOffHeapSuffix(), "42X48" },
	{ "create table t6 (d double precision, r real, f float(12.3))"+ getOffHeapSuffix(), "42X49" },
	//Test REAL
	{ "create table t (i int, s smallint, c char(10), v varchar(50),d double precision, r real)"+ getOffHeapSuffix(), null },
	{ "insert into t values (null, null, null, null, null, null)", null },
	{ "insert into t values (0, 100, 'hello', 'everyone is here', 200.0e0, 200.0e0)", null },
	{ "insert into t values (-1, -100, 'goodbye', 'everyone is there', -200.0e0, -200.0e0)", null },
	{ "select r + r, d + r, i + r, s + r, r + i from t", new String[][] {
		{null,null,null,null,null},
		{"400.0","400.0","200.0","300.0","200.0"},
		{"-400.0","-400.0","-201.0","-300.0","-201.0"} } },
	{ "select r + r + r, r + 100 + 432e0 from t", new String[][] { {null,null},{"600.0","732.0"},{"-600.0","332.0"} } },
	{ "select r - r, r - d, d - r, r - i, i - r, r - s, s - r from t", new String[][] {
		{null,null,null,null,null,null,null},
		{"0.0","0.0","0.0","200.0","-200.0","100.0","-100.0"},
		{"0.0","0.0","0.0","-199.0","199.0","-100.0","100.0"} } },
	{ "select r - r - r, r - 100 - 432e0 from t", new String[][] { {null,null},{"-200.0","-332.0"},{"200.0","-732.0"} } },
	{ "select i, d, s, r, i * r, r * i, s * r, d * r, r * r, r * 2, r * 2.0e0 from t", new String[][] {
		{null,null,null,null,null,null,null,null,null,null,null},
		{"0","200.0","100","200.0","0.0","0.0","20000.0","40000.0","40000.0","400.0","400.0"},
		{"-1","-200.0","-100","-200.0","200.0","200.0","20000.0","40000.0","40000.0","-400.0","-400.0"} } },
	{ "select -(r * 100 / 100e0 ), +(r * 100e0 / 100 ) from t", new String[][] { {null,null},{"-200.0","200.0"},{"200.0","-200.0"} } },
	{ "select i, d, r, d / r, CAST (i / r AS DECIMAL(6,5)), 10 / r, r / d, r / 10e0 from t", new String[][] {
		{null,null,null,null,null,null,null,null},
		{"0","200.0","200.0","1.0","0.00000","0.05","1.0","20.0"},
		{"-1","-200.0","-200.0","1.0","0.00500","-0.05","1.0","-20.0"} } },
	{ "select r / i from t", "22012" },
	{ "select r, r / -r, (-r) / r, (-r) / -r from t", new String[][] {
		{null,null,null,null}, {"200.0","-1.0","-1.0","1.0"}, {"-200.0","-1.0","-1.0","1.0"} } },
	//FIXME
	//SQLfire throws datatype exception for expression 3
	//{ "select r, r + 10e0, r - (10 - 20e0), r - 10, r - (20 - 10) from t", new String[][] {
	//	{null,null,null,null,null},
	//	{"200.0","210.0","210.0","190.0","190.0"},
	//	{"-200.0","-190.0","-190.0","-210.0","-210.0"} } },
	{ "drop table t", null },
	{ "create table s (d real, p real)", null },
	{ "insert into s values (null, null)", null },
	{ "insert into s values (0, 100)", null },
	{ "insert into s values (1, 101)", null },
	{ "select d + 3.4e+38 from s", new String[][] { {null},{"3.4E38"},{"3.4E38"} } },
	{ "insert into s values(3.403e+38, 3.403e+38)", "22003" },
	{ "insert into s values(- 3.403e+38, - 3.403e+38)", "22003" },
	{ "insert into s values(1.8e+100, 1.8e+100)", "22003" },
	{ "insert into s values(- 1.8e+100, - 1.8e+100)", "22003" },
	{ "select * from s", new String[][] { {null,null},{"0.0","100.0"},{"1.0","101.0"} } },
	{ "insert into s values(3.402e+38, - 3.402e+38)", null },
	{ "insert into s values(3.3e+38, - 3.3e+38)", null },
	//FIXME
	//SQLfire throws out-of-range exception for column P
	//{ "select d - 3.3e+38 - 3.3e+38, p * 3.3e+38, p * -3.3e+38 from s", new String[][] {
	//	{null,null,null},
	//	{"-6.6E38","3.3E40","-3.3E40"},
	//	{"-6.6E38","3.333E40","-3.333E40"},
	//	{"-3.1979999994446195E38","-1.1226600001832754E77","1.1226600001832754E77"},
	//	{"-3.3000000345172877E38","-1.088999988609295E77","1.088999988609295E77"} } },
	{ "select -d from s", new String[][] { {null},{"0.0"},{"-1.0"},{"-3.402E38"},{"-3.3E38"} } },
	{ "delete from s", null },
	{ "insert into s values (1,3.3e+38)", null },
	{ "select d - p - p from s", "22003" },
	{ "select p * p from s", "22003" },
	{ "select p * -p from s", "22003" },
	{ "delete from s", null },
	{ "insert into s values (.111, 1e-1)", null },
	{ "insert into s values (0.222, 0.222)", null },
	{ "select * from s", new String[][] { {"0.111","0.1"}, {"0.222","0.222"} } },
	{ "delete from s", null },
	{ "insert into s values (10, 1e-10)", null },
	{ "update s set d=d*1.4e-55, p=p*1.4e-45", "22003" },
	{ "select d, p from s", new String[][] { {"10.0","1.0E-10"} } },
	//FIXME
	//GemFireXD throws out-of-range exception 22003 here
	//{ "update s set d=d + 1.4e-46", null },
	//{ "select d from s", new String[][] { {"10.0"} } },
	{ "drop table s", null },
	{ "create table w (x real, y char)"+ getOffHeapSuffix(), null },
	{ "select x + y from w", "42846" },
	{ "select x - y from w", "42846" },
	{ "select x * y from w", "42846" },
	{ "select x / y from w", "42846" },
	{ "drop table w", null },
	{ "create table c (i int, s smallint, d double precision, r real, l real)"+ getOffHeapSuffix(), null },
	{ "insert into c values (0, 0, 0e0, 0e0, 0e0)", null },
	{ "insert into c values (null, null, 5e0, null, null)", null },
	{ "insert into c values (1, 1, 1e0, 2e0, 3e0)", null },
	{ "insert into c values (1956475, 1956, 1956475e0, 1956475e0, 1956475e0)", null },
	{ "select r from c where r = 0e0", new String[][] { {"0.0"} } },
	{ "select r from c where r = 1e0", new String[0][0] },
	{ "select r from c where r = 1956475e0", new String[][] { {"1956475.0"} } },
	{ "select r from c where l = 2e0", new String[0][0] },
	{ "select r from c where r = r", new String[][] { {"0.0"},{"2.0"},{"1956475.0"} } },
	{ "select r from c where r <> 0e0", new String[][] { {"2.0"},{"1956475.0"} } },
	{ "select r from c where r <> 1e0", new String[][] { {"0.0"},{"2.0"},{"1956475.0"} } },
	{ "select r from c where r < 1956475e0", new String[][] { {"0.0"},{"2.0"} } },
	{ "select r from c where r < 2e0", new String[][] { {"0.0"} } },
	{ "select r from c where r > d", new String[][] { {"2.0"} } },
	{ "select r from c where r <= 1", new String[][] { {"0.0"} } },
	{ "select r from c where r >= r", new String[][] { {"0.0"},{"2.0"},{"1956475.0"} } },
	{ "select r from c where r <= i", new String[][] { {"0.0"},{"1956475.0"} } },
	{ "select r from c where r < s", new String[0][0] },
	{ "select r from c where r > i", new String[][] { {"2.0"} } },
	{ "select r from c where r >= s", new String[][] { {"0.0"},{"2.0"},{"1956475.0"} } },
	{ "select r from c where r <> i", new String[][] { {"2.0"} } },
	{ "select r from c where r = s", new String[][] { {"0.0"} } },
	{ "select r from c where r = d", new String[][] { {"0.0"},{"1956475.0"} } },
	{ "select r from c where r >= d", new String[][] { {"0.0"},{"2.0"},{"1956475.0"} } },
	{ "create table o (c char(10), v varchar(30), dc decimal)"+ getOffHeapSuffix(), null },
	{ "select r from c,o where r <> dc", new String[0][0] },
	{ "drop table c", null },
	{ "drop table o", null },
	{ "create table source (i int, s smallint, c char(10), v varchar(50),	d double precision, r real)"+ getOffHeapSuffix(), null },
	{ "create table target (t real not null)"+ getOffHeapSuffix(), null },
	{ "insert into source values (1, 2, '3', '4', 5, 6)", null },
	{ "insert into target select i from source", null },
	{ "insert into target select s from source", null },
	{ "insert into target select d from source", null },
	{ "insert into target select r from source", null },
	{ "delete from source", null },
	{ "insert into source values (null, null, null, null, null, null)", null },
	{ "insert into source values (1, 2, '3', '4', 5, 6)", null },
	{ "insert into target values(null)", "23502" },
	{ "insert into target select i from source", "23502" },
	{ "insert into target select s from source", "23502" },
	{ "insert into target select d from source", "23502" },
	{ "insert into target select r from source", "23502" },
	{ "select * from target", new String[][] { {"1.0"},{"2.0"},{"5.0"},{"6.0"} } },
	{ "update target set t = t + 1", null },
	{ "select * from target", new String[][] { {"2.0"},{"3.0"},{"6.0"},{"7.0"} } },
	{ "update target set t = t - 1", null },
	{ "select * from target", new String[][] { {"1.0"},{"2.0"},{"5.0"},{"6.0"} } },
	{ "update target set t = t / 10", null },
	{ "select * from target", new String[][] { {"0.1"},{"0.2"},{"0.5"},{"0.6"} } },
	{ "update target set t = t * 10", null },
	{ "select * from target", new String[][] { {"1.0"},{"2.0"},{"5.0"},{"6.0"} } },
	{ "update source set r = 1.4e4", null },
	{ "update source set i = r, s=r, d=r", null },
	//FIXME
	//GemFireXD throws cast exception for INTEGER column I
	//{ "select i, s, d from source where i=1.4e4 or s=1.4e4 or d=1.4e4", new String[][] {
	//	{"14000","14000","14000.0"},
	//	{"14000","14000","14000.0"} } },
	{ "update source set i = r, r = 0, s = r", null },
	{ "select i, r, s from source where r = 0", new String[][] {
		{"14000","0.0","14000"},
		{"14000","0.0","14000"} } },
	{ "update source set r = 1.4e12", null },
	{ "update source set i = r", "22003" },
	{ "update source set s = r", "22003" },
	{ "drop table source", null },
	{ "drop table target", null },
	{ "drop table if exists fake", null },
	{ "create table fake(r real)"+ getOffHeapSuffix(), null },
	{ "values 5e-325", "22003" },
	{ "values 5e-324", "22003" },
	{ "insert into fake values( -3.402E+38 )", null },
	{ "insert into fake values( +3.402E+38 )", null },
	{ "insert into fake values -1", null },
	{ "insert into fake values( -1.175E-37 )", null },
	{ "insert into fake values( +1.175E-37 )", null },
	{ "insert into fake values -2", null },
	{ "insert into fake values( -3.4028235E38 )", "22003" },
	{ "insert into fake values( +3.4028235E38 )", "22003" },
	{ "insert into fake values -3", null },
	{ "insert into fake values( -1.4E-45 )", "22003" },
	{ "insert into fake values( +1.4E-45 )", "22003" },
	{ "insert into fake values -4", null },
	{ "insert into fake values (+0)", null },
	{ "insert into fake values (+0.0)", null },
	{ "insert into fake values (+0.0E-37)", null },
	{ "insert into fake values (+0.0E-38)", null },
	{ "insert into fake values (+0.0E-500)", null },
	{ "values (+0.0E-500)", new String[][] { {"0.0"} } },
	{ "values (+1.0E-300)", new String[][] { {"1.0E-300"} } },
	{ "insert into fake values (+1.0E-300)", "22003" },
	{ "insert into fake values (cast(+1.0E-900 as real))", "22003" },
	{ "values (cast(+1.0E-300 as real))", "22003" },
	{ "values (+1.0E-900)", "22003" },
	{ "values (cast(+1.0E-900 as real))", "22003" },
	{ "insert into fake values -11", null },
	{ "insert into fake values( -3.4019E+38 )", null },
	{ "insert into fake values( -3.4021E+38 )", "22003" },
	{ "insert into fake values -21", null },
	{ "insert into fake values( +3.4019E+38 )", null },
	{ "insert into fake values( +3.4021E+38 )", "22003" },
	{ "insert into fake values -22", null },
	{ "insert into fake values( -1.1749E-37 )", "22003" },
	{ "insert into fake values( -1.1751E-37 )", null },
	{ "insert into fake values -23", null },
	{ "insert into fake values( +1.1749E-37 )", "22003" },
	{ "insert into fake values( +1.1751E-37 )", null },
	{ "insert into fake values -24", null },
	{ "insert into fake values( -3.4028234E38 )", "22003" },
	{ "insert into fake values( -3.40282349E38 )", "22003" },
	{ "insert into fake values( -3.40282351E38 )", "22003" },
	{ "insert into fake values( -3.4028236E38 )", "22003" },
	{ "insert into fake values -25", null },
	{ "insert into fake values( +3.4028234E38 )", "22003" },
	{ "insert into fake values( +3.40282349E38 )", "22003" },
	{ "insert into fake values( +3.40282351E38 )", "22003" },
	{ "insert into fake values( +3.4028236E38 )", "22003" },
	{ "insert into fake values -26", null },
	{ "insert into fake values( -1.39E-45 )", "22003" },
	{ "insert into fake values( -1.399E-45 )", "22003" },
	{ "insert into fake values( -1.401E-45 )", "22003" },
	{ "insert into fake values( -1.41E-45 )", "22003" },
	{ "insert into fake values -27", null },
	{ "insert into fake values( +1.39E-45 )", "22003" },
	{ "insert into fake values( +1.399E-45 )", "22003" },
	{ "insert into fake values( +1.401E-45 )", "22003" },
	{ "insert into fake values( +1.41E-45 )", "22003" },
	{ "insert into fake values -28", null },
	{ "select count(*) from fake", new String[][] { {"26"} } },
	{ "drop table fake", null },
	{ "create table fake(r real)"+ getOffHeapSuffix(), null },
	{ "values cast(5e-37/1e0 as real)", new String[][] { {"5.0E-37"} } },
	{ "values cast(5e-37/1e1 as real)", "22003" },
	{ "values cast(5e-37/1e300 as real)", "22003" },
	{ "values cast(5e-37 as real)/cast(1e10 as real)", "22003" },
	{ "insert into fake values 5e-37/1e0", null },
	{ "insert into fake values 5e-37/1e1", "22003" },
	{ "insert into fake values 5e-37/1e300", "22003" },
	{ "insert into fake values cast(5e-37 as real)/cast(1e10 as real)", "22003" },
	{ "drop table fake", null },
	{ "values 5e-37 / 1e300", "22003" },
	{ "values cast(5e-37 / 1e300 as real)", "22003" },
	{ "values cast(cast(0.0e0 as real) - cast(0.0e0 as real) as real)", new String[][] { {"0.0"} } },
	{ "values cast(cast(1.0e-30 as real) - cast(1.0e-30 as real) as real)", new String[][] { {"0.0"} } },
	{ "values cast(cast(5e-37 as real) - cast(4e-37 as real) as real)", "22003" },
	{ "values cast(5e-37 - 4e-37 as real)", "22003" },
	{ "values cast(5e-37 - 4.99e-37 as real)", "22003" },
	{ "values cast(5e-308 - 4e-308 as real)", "22003" },
	{ "values cast(5e-37 + -4e-37 as real)", "22003" },
	{ "values cast(5e-324 - 4e-324 as real)", "22003" },
	{ "values cast(5e-37 * 4e-37 as real)", "22003" },
	{ "values cast(cast(5e-37 as real) * cast(4e-37 as real) as real)", "22003" },
	{ "values cast(5e-300 * 4e-300 as real)", "22003" },
	{ "values -3e-305/1e100", "22003" },
	{ "values -3e-305/1e100", "22003" },
	{ "values 0.0e5/-1", new String[][] { {"0.0"} } },
	{ "values 01234567890123456789012345678e1", "42820" },
	{ "values 0123456789012345678901234567e1", new String[][] { {"1.2345678901234569E27"} } },
	{ "create table t1 (c1 real)"+ getOffHeapSuffix(), null },
	{ "insert into t1 values -1.40129846432481700e-46", "22003" },
	{ "insert into t1 values +1.40129846432481700e-46", "22003" },
	{ "select * from t1", new String[0][0] },
	{ "insert into t1 values 3.40282346638528860e+38", "22003" },
	{ "insert into t1 values -3.40282346638528860e+38", "22003" },
	{ "select * from t1", new String[0][0] },
	{ "drop table t1", null },
	{ "drop table if exists tiger", null },
	{ "create table tiger(d decimal(12,11))"+ getOffHeapSuffix(), null },
	{ "insert into tiger values (1.234)", null },
	{ "insert into tiger values (0.1234)", null },
	{ "insert into tiger values (0.01234)", null },
	{ "insert into tiger values (0.001234)", null },
	{ "insert into tiger values (0.001234)", null },
	{ "insert into tiger values (0.0001234)", null },
	{ "insert into tiger values (0.00001234)", null },
	{ "insert into tiger values (0.000001234)", null },
	{ "insert into tiger values (0.0000001234)", null },
	{ "insert into tiger values (0.00000001234)", null },
	{ "insert into tiger values (0.00000001234)", null },
	{ "select d from tiger order by 1", new String[][] { {"0.00000001234"},{"0.00000001234"},
		{"0.00000012340"},{"0.00000123400"},{"0.00001234000"},{"0.00012340000"},
		{"0.00123400000"},{"0.00123400000"},{"0.01234000000"},{"0.12340000000"},{"1.23400000000"} } },
	{ "values cast ('1e+0' as DECIMAL(6,2))", new String[][] { {"1.00"} } },
	{ "values cast ('+-1e+1' as DECIMAL(6,2))", "22018" },
	{ "values cast ('-1e+1' as DECIMAL(6,2))", new String[][] { {"-10.00"} } },
	{ "values cast ('-1e-1' as DECIMAL(6,2))", new String[][] { {"-0.10"} } },
	{ "values cast ('-1e-+1' as DECIMAL(6,2))", "22018" },
	{ "values cast ('-1e--1' as DECIMAL(6,2))", "22018" },
	{ "values cast ('-1e+-1' as DECIMAL(6,2))", "22018" },
	{ "values cast ('-1e+-1' as DECIMAL(6,2))", "22018" },
	{ "values cast ('1.0e' as DECIMAL(6,2))", "22018" },
	{ "values cast ('1.0e+' as DECIMAL(6,2))", "22018" },
	{ "values cast ('1.0e-' as DECIMAL(6,2))", "22018" },
	{ "values cast ('1.0ee' as DECIMAL(6,2))", "22018" },
	{ "values cast ('123.' as DECIMAL(6,2))", new String[][] { {"123.00"} } },
	{ "values cast ('1e' as DECIMAL(6,2))", "22018" },
	{ "values cast ('1e1.0' as DECIMAL(6,2))", "22018" },
	{ "values cast ('.3' as DECIMAL(6,2))", new String[][] { {"0.30"} } },
	{ "values cast('' as DECIMAL(6,2))", "22018" }
    };

    // Do not use partitioning as default, use replicate
    // (Some results are expected to be different with partitioning)
    skipDefaultPartitioned = true;

    Connection conn = TestUtil.getConnection();
    Statement stmt = conn.createStatement();
    addExpectedException(new Object[] { "22003", EntryExistsException.class });
    // Go through the array, execute each string[0], check sqlstate [1]
    // This will fail on the first one that succeeds where it shouldn't
    // or throws unknown exception
    JDBC.SQLUnitTestHelper(stmt,Script_FloatTypesUT);
    removeExpectedException(new Object[] { "22003",
        EntryExistsException.class });
  }
  
  // This test is the script enhanced with partitioning
  public void testLangScript_FloatTypesWithPartitioning() throws Exception
  {
    // This form of the floattypes.sql test turns on partitioning
    // But SQL is not modified as too many tables are created and no joins occur
    Object[][] Script_FloatTypesUTPartitioning = {
	// Test DECIMAL and NUMERIC.  Note that we know that DECIMAL and NUMERIC are pretty much the same thing
	{ "create table tmp (tmpcoldecimal dec(8,4), tmpcolnumeric numeric)"+ getOffHeapSuffix(), null },
	{ "select columndatatype from sys.syscolumns where CAST(columnname AS VARCHAR(128)) like 'TMPCOL%'", new String[][] {
		{"DECIMAL(8,4)"},{"NUMERIC(38,0)"} } },    // GemFireXD maps NUMERIC to precision 38, not 5 (Derby's mapping)
	{ "drop table tmp", null },
	// Negative tests, bad precision/scale
	{ "create table bad (d decimal(11,12))"+ getOffHeapSuffix(), "42Y43" },
	{ "create table bad (d decimal(0,0))"+ getOffHeapSuffix(), "42X48" },
	{ "create table bad (d decimal(0))"+ getOffHeapSuffix(), "42X48" },
	{ "create table bade(d decimal(32))"+ getOffHeapSuffix(), null },		// GemFireXD allows decimal with precision > 31 up to 128
	{ "create table bade(d decimal(31,32))"+ getOffHeapSuffix(), "42Y43" },
	{ "create table bade2(d decimal(32,32))"+ getOffHeapSuffix(), null },
	{ "values cast (1 as dec)", new String[][] { {"1"} } },
	{ "values cast (1 as decimal)", new String[][] { {"1"} } },
	{ "values cast (1 as decimal(5))", new String[][] { {"1"} } },
	{ "values cast (1 as dec(5))", new String[][] { {"1"} } },
	{ "values cast (1.1 as dec(5,3))", new String[][] { {"1.100"} } },
	{ "values cast (1.1 as numeric(5,3))", new String[][] { {"1.100"} } },
	{ "values cast (1.1 as int)", new String[][] { {"1"} } },
	{ "values cast (1.1 as bigint)", new String[][] { {"1"} } },
	{ "values cast (1.1 as smallint)", new String[][] { {"1"} } },
	{ "values cast (1.1 as real)", new String[][] { {"1.1"} } },
	{ "values cast (1.1 as float)", new String[][] { {"1.1"} } },
	{ "values cast (1.1 as char(10))", new String[][] { {"1.1"} } },
	{ "values cast ((cast (1 as int)) as dec)", new String[][] { {"1"} } },
	{ "values cast ((cast (1 as bigint)) as dec)", new String[][] { {"1"} } },
	{ "values cast ((cast (1 as smallint)) as dec)", new String[][] { {"1"} } },
	{ "values cast ((cast (1 as real)) as dec)", new String[][] { {"1"} } },
	{ "values cast ((cast (1 as float)) as dec)", new String[][] { {"1"} } },
	{ "values cast ((cast (1 as char(10))) as dec)", new String[][] { {"1"} } },
	{ "create table tmp(d decimal(31 ,0))"+ getOffHeapSuffix(), null },
	{ "insert into tmp values (cast ('100000000000000000000000000000' as dec(31,0)))", null },
	{ "update tmp set d = d * d", "22003" },
	{ "select cast(d as int) from tmp", "22003" },
	{ "select cast(d as smallint) from tmp", "22003" },
	{ "select cast(d as bigint) from tmp", "22003" },
	{ "select cast(d as float) from tmp", new String[][] { {"1.0E29"} } },
	{ "select cast(d as real) from tmp", new String[][] { {"1.0E29"} } },
	{ "select cast(d as double precision) from tmp", new String[][] { {"1.0E29"} } },
	{ "select cast(d as double) from tmp", new String[][] { {"1.0E29"} } },
	{ "insert into tmp values (+1.79769E+308)", "22003" },
	{ "select * from tmp", new String[][] { {"100000000000000000000000000000"} } },
	{ "drop table tmp", null },
	{ "create table tmp (d decimal(5,2))"+ getOffHeapSuffix(), null },
	{ "insert into tmp values (100)", null },
	{ "insert into tmp values (cast (100 as smallint))", null },
	{ "insert into tmp values (cast (100 as bigint))", null },
	{ "insert into tmp values (cast (100 as real))", null },
	{ "insert into tmp values (cast (100 as double precision))", null },
	{ "insert into tmp values (cast (100.999 as real))", null },
	{ "insert into tmp values (100.999e0)", null },
	{ "insert into tmp values (100.999)", null },
	{ "insert into tmp values (1000)", "22003" },
	{ "insert into tmp values (cast (1000 as smallint))", "22003" },
	{ "insert into tmp values (cast (1000 as bigint))", "22003" },
	{ "insert into tmp values (cast (1000 as real))", "22003" },
	{ "insert into tmp values (cast (1000 as double precision))", "22003" },
	{ "insert into tmp values (cast (1000.999 as real))", "22003" },
	{ "insert into tmp values (1000.999e0)", "22003" },
	{ "insert into tmp values (1000.999)", "22003" },
	{ "insert into tmp values (1000)", "22003" },
	{ "insert into tmp values (10000)", "22003" },
	{ "insert into tmp values (100000)", "22003" },
	{ "insert into tmp values (1000000)", "22003" },
	{ "insert into tmp values (10000000)", "22003" },
	{ "insert into tmp values (100000000)", "22003" },
	{ "insert into tmp values (1000000000)", "22003" },
	{ "insert into tmp values (10000000000)", "22003" },
	{ "insert into tmp values (100000000000)", "22003" },
	{ "insert into tmp values (1000000000000)", "22003" },
	{ "insert into tmp values (10000000000000)", "22003" },
	{ "insert into tmp values (100000000000000)", "22003" },
	{ "insert into tmp values (-1000)", "22003" },
	{ "insert into tmp values (-10000)", "22003" },
	{ "insert into tmp values (-100000)", "22003" },
	{ "insert into tmp values (-1000000)", "22003" },
	{ "insert into tmp values (-10000000)", "22003" },
	{ "insert into tmp values (-100000000)", "22003" },
	{ "insert into tmp values (-1000000000)", "22003" },
	{ "insert into tmp values (-10000000000)", "22003" },
	{ "insert into tmp values (-100000000000)", "22003" },
	{ "insert into tmp values (-1000000000000)", "22003" },
	{ "insert into tmp values (-10000000000000)", "22003" },
	{ "insert into tmp values (-100000000000000)", "22003" },
	{ "drop table tmp", null },
	{ "create table tmp(d dec(1,1))"+ getOffHeapSuffix(), null },
	{ "insert into tmp values (0.0)", null },
	{ "insert into tmp values (-0.0)", null },
	{ "insert into tmp values (0.1)", null },
	{ "insert into tmp values (-0.1)", null },
	{ "insert into tmp values (0.1e0)", null },
	{ "insert into tmp values (-0.1e0)", null },
	{ "select * from tmp", new String[][] { {"0.0"},{"0.0"},{"0.1"},{"-0.1"},{"0.1"},{"-0.1"} } },
	{ "delete from tmp", null },
	{ "drop table tmp", null },
	{ "create table tmp2(d dec(1,1))"+ getOffHeapSuffix(), null },
	{ "insert into tmp2 values (0)", null },
	{ "insert into tmp2 values (0.0e0)", null },
	{ "insert into tmp2 values (0.0e10)", null },
	{ "insert into tmp2 values (-0)", null },
	{ "insert into tmp2 values (-0.0e0)", null },
	{ "insert into tmp2 values (-0.0e10)", null },
	{ "insert into tmp2 values (cast (0 as smallint))", null },
	{ "insert into tmp2 values (cast (0 as bigint))", null },
	{ "insert into tmp2 values (cast (0 as real))", null },
	{ "select * from tmp2", new String[][] { {"0.0"},{"0.0"},{"0.0"},{"0.0"},{"0.0"},{"0.0"},{"0.0"},{"0.0"},{"0.0"} } },
	{ "drop table tmp2", null },
	{ "create table tmp(d dec(1,0))"+ getOffHeapSuffix(), null },
	{ "insert into tmp values (1.0)", null },
	{ "insert into tmp values (1)", null },
	{ "insert into tmp values (1.0e0)", null },
	{ "insert into tmp values (-1.0)", null },
	{ "insert into tmp values (-1)", null },
	{ "insert into tmp values (-1.0e0)", null },
	{ "insert into tmp values (cast (1 as smallint))", null },
	{ "insert into tmp values (cast (1 as bigint))", null },
	{ "insert into tmp values (cast (1 as real))", null },
	{ "select * from tmp", new String[][] { {"1"},{"1"},{"1"},{"-1"},{"-1"},{"-1"},{"1"},{"1"},{"1"} } },
	{ "drop table tmp", null },
	{ "create table tmp (x double)"+ getOffHeapSuffix(), null },
	{ "insert into tmp values (1)", null },
	{ "select columnname, columndatatype from sys.syscolumns c, sys.systables t where c.referenceid = t .tableid and CAST(t.tablename AS VARCHAR(128)) ='TMP'", new String [][] { {"X","DOUBLE"} } },
	{ "drop table tmp", null },
	{ "create table tmp (d decimal)"+ getOffHeapSuffix(), null },
	{ "insert into tmp values (1.1)", null },
	{ "insert into tmp values (1)", null },
	{ "select cast(d as int) from tmp", new String [][] { {"1"},{"1"} } },
	{ "select cast(d as smallint) from tmp", new String [][] { {"1"},{"1"} } },
	{ "select cast(d as bigint) from tmp", new String [][] { {"1"},{"1"} } },
	{ "select cast(d as float) from tmp", new String[][] { {"1.0"},{"1.0"} } },
	{ "select cast(d as real) from tmp", new String[][] { {"1.0"},{"1.0"} } },
	{ "select cast(d as double precision) from tmp", new String[][] { {"1.0"},{"1.0"} } },
	{ "select cast(d as dec(10,2)) from tmp", new String[][] { {"1.00"},{"1.00"} } },
	{ "select cast(d as dec(10,8)) from tmp", new String[][] { {"1.00000000"},{"1.00000000"} } },
	{ "drop table tmp", null },
	{ "create table t (i int, l bigint,s smallint, d double precision,r real,dc decimal(10,2))"+ getOffHeapSuffix(), null },
	{ "insert into t values (null, null, null, null, null, null)", null },
	{ "insert into t values (10,10,10,10,10,10)", null },
	{ "insert into t values (-10,-10,-10,-10,-10,-10)", null },
	{ "insert into t values (0,0,0,0,0,0)", null },
	{ "select dc from t", new String[][] { {null},{"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc + i, dc + s, dc + r, dc + dc from t", new String[][] {
		{null,null,null,null},
		{"20.00","20.00","20.0","20.00"},
		{"-20.00","-20.00","-20.0","-20.00"},
		{"0.00","0.00","0.0","0.00"} } },
	{ "select dc - i, dc - s, dc - r, dc - dc from t", new String[][] {
		{null,null,null,null},
		{"0.00","0.00","0.0","0.00"},
		{"0.00","0.00","0.0","0.00"},
		{"0.00","0.00","0.0","0.00"} } },
	{ "select dc * i, dc * s, dc * r, dc * dc from t", new String [][] {
		{null,null,null,null},
		{"100.00","100.00","100.0","100.0000"},
		{"100.00","100.00","100.0","100.0000"},
		{"0.00","0.00","0.0","0.0000"} } },
	{ "select dc / i, dc / s, dc / r, dc / dc from t", "22012" },
	{ "select -(dc * 100 / 100e0 ), +(dc * 100e0 / 100 ) from t", new String[][] {
		{null,null},{"-10.0","10.0"},{"10.0","-10.0"},{"0.0","0.0"} } },
	{ "select dc, i / dc, 10 / dc, dc / 10e0 from t", "22012" },
	{ "select dc / i from t", "22012" },
	{ "select 20e0 / 5e0 / 4e0, 20e0 / 4e0 / 5 from t", new String[][] {
		{"1.0","1.0"},{"1.0","1.0"},{"1.0","1.0"},{"1.0","1.0"} } },
	{ "select dc, dc / -dc, (-dc) / dc, (-dc) / -dc from t", "22012" },
	//FIXME
	// This throws an invalid cast exception (22018)
	//{ "select dc, dc + 10e0, dc - (10 - 20e0), dc - 10, dc - (20 - 10) from t", new String[][] {
	//	{null,null,null,null,null},
	//	{"10.00","20.0","20.0","0.00","0.00"},
	//	{"-10.00","0.0","0.0","-20.00","-20.00"},
	//	{"0.00","10.0","10.0","-10.00","-10.00"} } },
	{ "values (9.0 + 9.0)", new String[][] { {"18.0"} } },
	{ "values (9.9 + 9.9)", new String[][] { {"19.8"} } },
	{ "values (-9.0 - 9.0)", new String[][] { {"-18.0"} } },
	{ "values (-9.9 - 9.9)", new String[][] { {"-19.8"} } },
	{ "values (9.0 * 9.0)", new String[][] { {"81.00"} } },
	{ "values (9.9 * 9.9)", new String[][] { {"98.01"} } },
	{ "values (0.9 * 0.9)", new String[][] { {"0.81"} } },
	{ "values (0.9999 * 0.9)", new String[][] { {"0.89991"} } },
	{ "values (0.9 * 0.9999)", new String[][] { {"0.89991"} } },
	{ "values (0.9999 * 0.9999)", new String[][] { {"0.99980001"} } },
	{ "values (1.0 / 3.0)", new String[][] { {"0.3333"} } },         // Derby has more precision than GFXD for division here
	{ "values (1.0 / 0.3)", new String[][] { {"3.3333"} } },
	{ "values (1.0 / 0.03)", new String[][] { {"33.3333"} } },
	{ "values (1.0 / 0.000003)", new String[][] { {"333333.333333"} } },
	{ "values (10000.0 / 0.000003)", new String[][] { { "3333333333.333333"} } },
	{ "values (0.0001 / 0.0003)", new String[][] { {"0.3333"} } },
	{ "values (0.1 / 3.0)", new String[][] { {"0.0333"} } },
	{ "values (cast(1.7e3 as dec(31)) *cast(1.7e3 as dec(31)) *cast(1.7e3 as dec(31)) *cast(1.7e3 as dec(31)) *cast(1.7e3 as dec(31)) *cast(1.7e3 as dec(31)) *cast(1.7e3 as dec(31)) *cast(1.7e3 as dec(31)))", new String[][] { {"69757574410000000000000000"} } },
	{ "values cast(1.7e30 as dec(31))", new String[][] { {"1700000000000000000000000000000"} } },
	{ "values cast(1 as dec(31, 20))", new String[][] { {"1.00000000000000000000"} } },
	{ "create table w (x dec, y long varchar)"+ getOffHeapSuffix(), null },
	{ "select x + y from w", "42846" },
	{ "select x - y from w", "42846" },
	{ "select x * y from w", "42846" },
	{ "select x / y from w", "42846" },
	{ "drop table w", null },
	// comparisons
	{ "insert into t values (123, 123, 123, 1234.56, 1234.56, 1234.56)", null },
	{ "select dc from t where dc is null", new String[][] { {null} } },
	{ "select dc from t where dc = 10", new String[][] { {"10.00"} } },
	{ "select dc from t where dc = -10", new String[][] { {"-10.00"} } },
	{ "select dc from t where dc = 0", new String[][] { {"0.00"} } },
	{ "select dc from t where dc = 1234.45", new String[0][0] },
	{ "select dc from t where dc = i", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc = l", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc = s", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc = r", new String[][] { {"10.00"},{"-10.00"},{"0.00"}, {"1234.56"} } },
	{ "select dc from t where dc = d", new String[][] { {"10.00"},{"-10.00"},{"0.00"}, {"1234.56"} } },
	{ "select dc from t where dc = dc", new String[][] { {"10.00"},{"-10.00"},{"0.00"}, {"1234.56"} } },
	{ "select dc from t where dc > 10", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc > -10", new String[][] { {"10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc > 0", new String[][] { {"10.00"},{"1234.56"} } },
	{ "select dc from t where dc > 1234.45", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc > i", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc > l", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc > s", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc > r", new String[0][0] },
	{ "select dc from t where dc > d", new String[0][0] },
	{ "select dc from t where dc > dc", new String[0][0] },
	{ "select dc from t where dc >= 10", new String[][] { {"10.00"},{"1234.56"} } },
	{ "select dc from t where dc >= -10", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc >= 0", new String[][] { {"10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc >= 1234.45", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc >= i", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc >= l", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc >= s", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc >= r", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc >= d", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc >= dc", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc < 10", new String[][] { {"-10.00"},{"0.00"} } },
	{ "select dc from t where dc < -10", new String[0][0] },
	{ "select dc from t where dc < 0", new String[][] { {"-10.00"} } },
	{ "select dc from t where dc < 1234.45", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc < i", new String[0][0] },
	{ "select dc from t where dc < l", new String[0][0] },
	{ "select dc from t where dc < s", new String[0][0] },
	{ "select dc from t where dc < r", new String[0][0] },
	{ "select dc from t where dc < d", new String[0][0] },
	{ "select dc from t where dc < dc", new String[0][0] },
	{ "select dc from t where dc <= 10", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc <= -10", new String[][] { {"-10.00"} } },
	{ "select dc from t where dc <= 0", new String[][] { {"-10.00"},{"0.00"} } },
	{ "select dc from t where dc <= 1234.45", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc <= i", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc <= l", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc <= s", new String[][] { {"10.00"},{"-10.00"},{"0.00"} } },
	{ "select dc from t where dc <= r", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc <= d", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc <= dc", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc <> 10", new String[][] { {"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc <> -10", new String[][] { {"10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc <> 0", new String[][] { {"10.00"},{"-10.00"},{"1234.56"} } },
	{ "select dc from t where dc <> 1234.45", new String[][] { {"10.00"},{"-10.00"},{"0.00"},{"1234.56"} } },
	{ "select dc from t where dc <> i", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc <> l", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc <> s", new String[][] { {"1234.56"} } },
	{ "select dc from t where dc <> r", new String[0][0] },
	{ "select dc from t where dc <> d", new String[0][0] },
	{ "select dc from t where dc <> dc", new String[0][0] },
	// test a variety of inserts and updates
	{ "create table t2 (i int, l bigint,	s smallint, d double precision,	r real, dc decimal(10,2))"+ getOffHeapSuffix(), null },
	{ "insert into t2 select * from t", null },
	{ "create index dcindex on t2(dc)", null },
	{ "create unique index dcuniqueindex on t2(dc)", null },
	{ "update t2 set dc = dc + 1.1", null },
	{ "select dc from t2", new String[][] { {"-8.90"},{"1.10"},{"11.10"},{"1235.66"}, {null} } },
	{ "update t2 set dc = dc - 1.1", null },
	{ "select dc from t2", new String[][] { {"-10.00"},{"0.00"},{"10.00"},{"1234.56"}, {null} } },
	{ "update t2 set dc = dc / 1.1", null },
	{ "select dc from t2", new String[][] { {"-9.09"},{"0.00"},{"9.09"},{"1122.32"},{null} } },
	{ "update t2 set dc = dc * 1.1", null },
	{ "select dc from t2", new String[][] { {"-9.99"},{"0.00"},{"9.99"},{"1234.55"},{null} } },
	{ "delete from t2 where dc > 0", null },
	{ "select dc from t2", new String[][] { {"-9.99"},{"0.00"},{null} } },
	{ "delete from t2 where dc = 0", null },
	{ "select dc from t2", new String[][] { {"-9.99"},{null} } },
	{ "delete from t2 where dc < 0", null },
	{ "select dc from t2", new String[][] { {null} } },
	{ "drop table t2", null },
	{ "drop table t", null },
	{ "create table t (c1 char(1), d dec(20,4), c2 char(1))"+ getOffHeapSuffix(), null },
	{ "create unique index tu on t(d)", null },
	{ "insert into t values ('a', 1.123, 'Z')", null },
	{ "insert into t values ('a', 11111.123, 'Z')", null },
	{ "insert into t values ('a', 11111111.123, 'Z')", null },
	{ "insert into t values ('a', 6.123, 'Z')", null },
	{ "insert into t values ('a', 666.123, 'Z')", null },
	{ "insert into t values ('a', .6, 'Z')", null },
	{ "insert into t values ('a', 0, 'Z')", null },
	{ "insert into t values ('a', 666666.123, 'Z')", null },
	{ "insert into t values ('a', 99999999999999.123, 'Z')", null },
	{ "insert into t values ('a', 9.123, 'Z')", null },
	{ "select * from t", new String[][] {
		{"a", "1.1230", "Z"},
		{"a", "11111.1230", "Z"},
		{"a","11111111.1230","Z"},  
		{"a","6.1230","Z"},
		{"a","666.1230","Z"},
		{"a","0.6000","Z"},
		{"a","0.0000","Z"},
		{"a","666666.1230","Z"},
		{"a","99999999999999.1230","Z"},
		{"a","9.1230","Z"} } },
	{ "update t set d = d + .0007", null },
	{ "select * from t", new String[][] { 
		{"a", "1.1237", "Z"},
		{"a", "11111.1237", "Z"},
		{"a","11111111.1237","Z"},  
		{"a","6.1237","Z"},
		{"a","666.1237","Z"},
		{"a","0.6007","Z"},
		{"a","0.0007","Z"},
		{"a","666666.1237","Z"},
		{"a","99999999999999.1237","Z"},
		{"a","9.1237","Z"} } },
	{ "drop table t", null },
	// Test double
	{ "create table t (i int, s smallint, c char(10), v varchar(50),d double precision)"+ getOffHeapSuffix(), null },
	{ "insert into t values (null, null, null, null, null)", null },
	{ "insert into t values (0, 100, 'hello', 'everyone is here', 200.0e0)", null },
	{ "insert into t values (-1, -100, 'goodbye', 'everyone is there', -200.0e0)", null },
	{ "select d + d, i + d, s + d from t", new String[][] {
		{null,null,null},{"400.0","200.0","300.0"},{"-400.0","-201.0","-300.0"} } },
	{ "select d + d + d, d + 100 + 432e0 from t", new String[][] {
		{null,null},{"600.0","732.0"},{"-600.0","332.0"} } },
	{ "select d - i, i - d, d - s, s - d from t", new String[][] {
		{null,null,null,null},
		{"200.0","-200.0","100.0","-100.0"},
		{"-199.0","199.0","-100.0","100.0"} } },
	{ "select d - d - d, d - 100 - 432e0 from t", new String[][] {
		{null,null},{"-200.0","-332.0"},{"200.0","-732.0"} } },
	{ "select i, d, i * d, d * i, d * d, d * 2, d * 2.0e0 from t", new String[][] {
		{null,null,null,null,null,null,null},
		{"0","200.0","0.0","0.0","40000.0","400.0","400.0"},
		{"-1","-200.0","200.0","200.0","40000.0","-400.0","-400.0"} } },
	{ "select -(d * 100 / 100e0 ), +(d * 100e0 / 100 ) from t", new String[][] {
		{null,null},{"-200.0","200.0"},{"200.0","-200.0"} } },
	{ "select i, d, CAST (i / d AS DECIMAL(6,5)), 10 / d, d / 10e0 from t", new String[][] {
		{null,null,null,null,null},
		{"0","200.0","0.00000","0.05","20.0"},
		{"-1","-200.0","0.00500","-0.05","-20.0"} } },
	{ "select d / i from t", "22012" },
	{ "select 20e0 / 5e0 / 4e0, 20e0 / 4e0 / 5 from t", new String[][] {
		{"1.0","1.0"}, {"1.0","1.0"}, {"1.0","1.0"} } },
	{ "select d, d / -d, (-d) / d, (-d) / -d from t", new String[][] {
		{null,null,null,null},
		{"200.0","-1.0","-1.0","1.0"},
		{"-200.0","-1.0","-1.0","1.0"} } },
	{ "select d+1.1 from t", new String[][] { {null},{"201.1"},{"-198.9"} } },
	{ "insert into t (d) values(1.1)", null },
	{ "select d from t where d=1.1", new String[][] { {"1.1"} } },
	{ "drop table t", null },
	// test overflow
	{ "create table s (d double precision, p double)"+ getOffHeapSuffix(), null },
	{ "insert into s values (null, null)", null },
	{ "insert into s values (0, 100)", null },
	{ "insert into s values (1, 101)", null },
	{ "select d + 1.7e+308 from s", new String[][] { {null},{"1.7E308"},{"1.7E308"} } },
	{ "select 1.798e+308, - 1.798e+308, 'This query should not work' from s", "22003" },
	{ "select 1.8e+1000, - 1.8e+1000, 'This query should not work' from s", "22003" },
	{ "select 1.797e+308, - 1.797e+308, 'This query should work' from s", new String[][] {
		{"1.797E308","-1.797E308","This query should work"},
		{"1.797E308","-1.797E308","This query should work"},	
		{"1.797E308","-1.797E308","This query should work"} } },
	{ "select 1.6e+308, - 1.6e+308, 'This query should work' from s", new String[][] {
		{"1.6E308","-1.6E308","This query should work"},
		{"1.6E308","-1.6E308","This query should work"},	
		{"1.6E308","-1.6E308","This query should work"} } },
	{ "select d - 1.6e+308 - 0, 'This query should work' from s", new String[][] {
		{null,"This query should work"},
		{"-1.6E308","This query should work"},
		{"-1.6E308","This query should work"} } },
	{ "select d - 1.6e+308 - 1.6e+308, 'This query should fail' from s", "22003" },
	{ "select p * 1.6e+308 from s", "22003" },
	{ "select p * -1.6e+308 from s", "22003" },
	{ "insert into s values (-1.6e+308, 0)", null },
	{ "insert into s values (-1.797e+308, 0)", null },
	{ "insert into s values (-1.798e+308, 0)", "22003" },
	{ "insert into s values (-1.8e+308, 0)", "22003" },
	{ "select -d from s", new String[][] { {null},{"0.0"},{"-1.0"},{"1.6E308"},{"1.797E308"} } },
	{ "drop table s", null },
	{ "create table w (x double precision, y long varchar)"+ getOffHeapSuffix(), null },
	{ "select x + y from w", "42846" },
	{ "select x - y from w", "42846" },
	{ "select x * y from w", "42846" },
	{ "select x / y from w", "42846" },
	{ "drop table w", null },
	//comparisons
	{ "create table c (i int, s smallint, d double precision, p double precision)"+ getOffHeapSuffix(), null },
	{ "insert into c values (0, 0, 0e0, 0e0)", null },
	{ "insert into c values (null, null, 5e0, null)", null },
	{ "insert into c values (1, 1, 1e0, 2e0)", null },
	{ "insert into c values (1956475, 1956, 1956475e0, 1956475e0)", null },
	{ "select d from c where d = 0e0", new String[][] { {"0.0"} } },
	{ "select d from c where d = 1e0", new String[][] { {"1.0"} } },
	{ "select d from c where d = 1956475e0", new String[][] { {"1956475.0"} } },
	{ "select d from c where p = 2e0", new String[][] { {"1.0"} } },
	{ "select d from c where d = d", new String[][] { {"0.0"},{"5.0"},{"1.0"},{"1956475.0"} } },
	{ "select d from c where d <> 0e0", new String[][] { {"5.0"},{"1.0"},{"1956475.0"} } },
	{ "select d from c where d <> 1e0", new String[][] { {"0.0"},{"5.0"},{"1956475.0"} } },
	{ "select d from c where d < 1956475e0", new String[][] { {"0.0"},{"5.0"},{"1.0"} } },
	{ "select d from c where d < 2e0", new String[][] { {"0.0"},{"1.0"} } },
	{ "select d from c where d > d", new String[0][0] },
	{ "select d from c where d > p", new String[0][0] },
	{ "select d from c where d <= 0e0", new String[][] { {"0.0"} } },
	{ "select d from c where d <= 1e0", new String[][] { {"0.0"},{"1.0"} } },
	{ "select d from c where d <= 2e0", new String[][] { {"0.0"},{"1.0"} } },
	{ "select d from c where d >= 1956475e0", new String[][] { {"1956475.0"} } },
	{ "select d from c where d >= d", new String[][] { {"0.0"},{"5.0"},{"1.0"},{"1956475.0"} } },
	{ "select d from c where d >= p", new String[][] { {"0.0"},{"1956475.0"} } },
	{ "select d from c where d <= i", new String[][] { {"0.0"},{"1.0"},{"1956475.0"} } },
	{ "select d from c where d < s", new String[0][0] },
	{ "select d from c where d > i", new String[0][0] },
	{ "select d from c where d >= s", new String[][] { {"0.0"},{"1.0"},{"1956475.0"} } },
	{ "select d from c where d <> i", new String[0][0] },
	{ "select d from c where d = s", new String[][] { {"0.0"},{"1.0"} } },
	//FIXME
	// SQLfire throws cast exception 22003 for this
	//{ "select d from c where s = 65537e0", new String[0][0] },
	{ "select d from c where d = (select d from c)", "21000" },
	{ "select d from c where d = (select d from c where d=5)", new String[][] { {"5.0"} } },
	{ "create table o (c char(10), v varchar(30), dc decimal)"+ getOffHeapSuffix(), null },
	{ "select d from c,o where d <> dc", new String[0][0] },
	{ "drop table c", null },
	{ "drop table o", null },
	//test a variety of inserts and updates
	{ "create table source (i int, s smallint, c char(10), v varchar(50),	d double precision)"+ getOffHeapSuffix(), null },
	{ "create table target (p double precision not null)"+ getOffHeapSuffix(), null },
	{ "insert into source values (1, 2, '3', '4', 5)", null },
	{ "insert into target select i from source", null },
	{ "insert into target select s from source", null },
	{ "insert into target select d from source", null },
	{ "delete from source", null },
	{ "insert into source values (null, null, null, null, null)", null },
	{ "insert into target values(null)", "23502" },
	{ "insert into target select i from source", "23502" },
	{ "insert into target select s from source", "23502" },
	{ "insert into target select d from source", "23502" },
	{ "select * from target", new String[][] { {"1.0"},{"2.0"},{"5.0"} } },
	{ "update target set p = p + 1", null },
	{ "select * from target", new String[][] { {"2.0"},{"3.0"},{"6.0"} } },
	{ "update target set p = p - 1", null },
	{ "select * from target", new String[][] { {"1.0"},{"2.0"},{"5.0"} } },
	{ "update target set p = p / 10", null },
	{ "select * from target", new String[][] { {"0.1"},{"0.2"},{"0.5"} } },
	{ "update target set p = p * 10", null },
	{ "select * from target", new String[][] { {"1.0"},{"2.0"},{"5.0"} } },
	{ "update source set i = 1.4e8", null },
	{ "update source set s = 1.4e4", null },
	// FIXME
	// GemFireXD throws cast exception 22018 here
	//{ "select i, s from source where i=1.4e8 or s=1.4e4", new String[][] { {"140000000","14000"} } },
	{ "update source set i = 1.4e12", "22003" },
	{ "update source set s = 1.4e12", "22003" },
	{ "drop table source", null },
	{ "drop table target", null },
	{ "create table abcfloat (numtest float(20))"+ getOffHeapSuffix(), null },
	{ "insert into abcfloat values (1.23456789)", null },
	{ "insert into abcfloat values (.123456789)", null },
	{ "insert into abcfloat values (-.123456789)", null },
	{ "insert into abcfloat values (0.223456789)", null },
	{ "insert into abcfloat values (-0.223456789)", null },
	{ "insert into abcfloat values (12345678.9)", null },
	{ "select * from abcfloat", new String[][] {
		{"1.2345679"},{"0.12345679"},{"-0.12345679"},{"0.22345679"},{"-0.22345679"},{"1.2345679E7"} } },
	{ "drop table abcfloat", null },
	// Test float
	{ "create table t (d double precision, r real, f float, f1 float(1),	f23 float(23), f24 float(24), f53 float(52))"+ getOffHeapSuffix(), null },
	{ "select columnname, columndatatype from sys.syscolumns c, sys.systables t where c.referenceid = t.tableid and CAST(t.tablename AS VARCHAR(128)) ='T'", new String[][] {
		{"D","DOUBLE"},{"F","DOUBLE"},{"F1","REAL"},{"F23","REAL"},{"F24","DOUBLE"},{"F53","DOUBLE"},{"R","REAL"} } },
	{ "insert into t(r) values 'NaN'", "42821" },   //Derby expected data type mismatch, GemFireXD throws out-of-range, same difference
	{ "insert into t(r) values +3.4021E+38", "22003" },
	{ "insert into t(r) values -3.4021E+38", "22003" },
	{ "create table tt(c char(254))"+ getOffHeapSuffix(), null },
	{ "insert into tt values -3.402E+38", "42821" },
	{ "insert into t(r) select * from tt", "42821" },
	{ "insert into t(r) values '1.0'", "42821" },
	{ "update t set r = NaN", "42X04" },
	{ "update t set r = +3.4021E+38", null },
	{ "update t set r = -3.4021E+38", null },
	{ "drop table t", null },
	{ "drop table tt", null },
	{ "create table t1 (d double precision, r real, f float(-10))"+ getOffHeapSuffix(), "42X01" },
	{ "create table t2 (d double precision, r real, f float(-1))"+ getOffHeapSuffix(), "42X01" },
	{ "create table t3 (d double precision, r real, f float(0))"+ getOffHeapSuffix(), "42X48" },
	{ "create table t4 (d double precision, r real, f float(100))"+ getOffHeapSuffix(), "42X48" },
	{ "create table t5 (d double precision, r real, f float(53))"+ getOffHeapSuffix(), "42X48" },
	{ "create table t6 (d double precision, r real, f float(12.3))"+ getOffHeapSuffix(), "42X49" },
	//Test REAL
	{ "create table t (i int, s smallint, c char(10), v varchar(50),d double precision, r real)"+ getOffHeapSuffix(), null },
	{ "insert into t values (null, null, null, null, null, null)", null },
	{ "insert into t values (0, 100, 'hello', 'everyone is here', 200.0e0, 200.0e0)", null },
	{ "insert into t values (-1, -100, 'goodbye', 'everyone is there', -200.0e0, -200.0e0)", null },
	{ "select r + r, d + r, i + r, s + r, r + i from t", new String[][] {
		{null,null,null,null,null},
		{"400.0","400.0","200.0","300.0","200.0"},
		{"-400.0","-400.0","-201.0","-300.0","-201.0"} } },
	{ "select r + r + r, r + 100 + 432e0 from t", new String[][] { {null,null},{"600.0","732.0"},{"-600.0","332.0"} } },
	{ "select r - r, r - d, d - r, r - i, i - r, r - s, s - r from t", new String[][] {
		{null,null,null,null,null,null,null},
		{"0.0","0.0","0.0","200.0","-200.0","100.0","-100.0"},
		{"0.0","0.0","0.0","-199.0","199.0","-100.0","100.0"} } },
	{ "select r - r - r, r - 100 - 432e0 from t", new String[][] { {null,null},{"-200.0","-332.0"},{"200.0","-732.0"} } },
	{ "select i, d, s, r, i * r, r * i, s * r, d * r, r * r, r * 2, r * 2.0e0 from t", new String[][] {
		{null,null,null,null,null,null,null,null,null,null,null},
		{"0","200.0","100","200.0","0.0","0.0","20000.0","40000.0","40000.0","400.0","400.0"},
		{"-1","-200.0","-100","-200.0","200.0","200.0","20000.0","40000.0","40000.0","-400.0","-400.0"} } },
	{ "select -(r * 100 / 100e0 ), +(r * 100e0 / 100 ) from t", new String[][] { {null,null},{"-200.0","200.0"},{"200.0","-200.0"} } },
	{ "select i, d, r, d / r, CAST (i / r AS DECIMAL(6,5)), 10 / r, r / d, r / 10e0 from t", new String[][] {
		{null,null,null,null,null,null,null,null},
		{"0","200.0","200.0","1.0","0.00000","0.05","1.0","20.0"},
		{"-1","-200.0","-200.0","1.0","0.00500","-0.05","1.0","-20.0"} } },
	{ "select r / i from t", "22012" },
	{ "select r, r / -r, (-r) / r, (-r) / -r from t", new String[][] {
		{null,null,null,null}, {"200.0","-1.0","-1.0","1.0"}, {"-200.0","-1.0","-1.0","1.0"} } },
	//FIXME
	//SQLfire throws datatype exception for expression 3
	//{ "select r, r + 10e0, r - (10 - 20e0), r - 10, r - (20 - 10) from t", new String[][] {
	//	{null,null,null,null,null},
	//	{"200.0","210.0","210.0","190.0","190.0"},
	//	{"-200.0","-190.0","-190.0","-210.0","-210.0"} } },
	{ "drop table t", null },
	{ "create table s (d real, p real)"+ getOffHeapSuffix(), null },
	{ "insert into s values (null, null)", null },
	{ "insert into s values (0, 100)", null },
	{ "insert into s values (1, 101)", null },
	{ "select d + 3.4e+38 from s", new String[][] { {null},{"3.4E38"},{"3.4E38"} } },
	{ "insert into s values(3.403e+38, 3.403e+38)", "22003" },
	{ "insert into s values(- 3.403e+38, - 3.403e+38)", "22003" },
	{ "insert into s values(1.8e+100, 1.8e+100)", "22003" },
	{ "insert into s values(- 1.8e+100, - 1.8e+100)", "22003" },
	{ "select * from s", new String[][] { {null,null},{"0.0","100.0"},{"1.0","101.0"} } },
	{ "insert into s values(3.402e+38, - 3.402e+38)", null },
	{ "insert into s values(3.3e+38, - 3.3e+38)", null },
	//FIXME
	//SQLfire throws out-of-range exception for column P
	//{ "select d - 3.3e+38 - 3.3e+38, p * 3.3e+38, p * -3.3e+38 from s", new String[][] {
	//	{null,null,null},
	//	{"-6.6E38","3.3E40","-3.3E40"},
	//	{"-6.6E38","3.333E40","-3.333E40"},
	//	{"-3.1979999994446195E38","-1.1226600001832754E77","1.1226600001832754E77"},
	//	{"-3.3000000345172877E38","-1.088999988609295E77","1.088999988609295E77"} } },
	{ "select -d from s", new String[][] { {null},{"0.0"},{"-1.0"},{"-3.402E38"},{"-3.3E38"} } },
	{ "delete from s", null },
	{ "insert into s values (1,3.3e+38)", null },
	{ "select d - p - p from s", "22003" },
	{ "select p * p from s", "22003" },
	{ "select p * -p from s", "22003" },
	{ "delete from s", null },
	{ "insert into s values (.111, 1e-1)", null },
	{ "insert into s values (0.222, 0.222)", null },
	{ "select * from s", new String[][] { {"0.111","0.1"}, {"0.222","0.222"} } },
	{ "delete from s", null },
	{ "insert into s values (10, 1e-10)", null },
	{ "update s set d=d*1.4e-55, p=p*1.4e-45", "22003" },
	{ "select d, p from s", new String[][] { {"10.0","1.0E-10"} } },
	//FIXME
	//GemFireXD throws out-of-range exception 22003 here
	//{ "update s set d=d + 1.4e-46", null },
	//{ "select d from s", new String[][] { {"10.0"} } },
	{ "drop table s", null },
	{ "create table w (x real, y char)"+ getOffHeapSuffix(), null },
	{ "select x + y from w", "42846" },
	{ "select x - y from w", "42846" },
	{ "select x * y from w", "42846" },
	{ "select x / y from w", "42846" },
	{ "drop table w", null },
	{ "create table c (i int, s smallint, d double precision, r real, l real)"+ getOffHeapSuffix(), null },
	{ "insert into c values (0, 0, 0e0, 0e0, 0e0)", null },
	{ "insert into c values (null, null, 5e0, null, null)", null },
	{ "insert into c values (1, 1, 1e0, 2e0, 3e0)", null },
	{ "insert into c values (1956475, 1956, 1956475e0, 1956475e0, 1956475e0)", null },
	{ "select r from c where r = 0e0", new String[][] { {"0.0"} } },
	{ "select r from c where r = 1e0", new String[0][0] },
	{ "select r from c where r = 1956475e0", new String[][] { {"1956475.0"} } },
	{ "select r from c where l = 2e0", new String[0][0] },
	{ "select r from c where r = r", new String[][] { {"0.0"},{"2.0"},{"1956475.0"} } },
	{ "select r from c where r <> 0e0", new String[][] { {"2.0"},{"1956475.0"} } },
	{ "select r from c where r <> 1e0", new String[][] { {"0.0"},{"2.0"},{"1956475.0"} } },
	{ "select r from c where r < 1956475e0", new String[][] { {"0.0"},{"2.0"} } },
	{ "select r from c where r < 2e0", new String[][] { {"0.0"} } },
	{ "select r from c where r > d", new String[][] { {"2.0"} } },
	{ "select r from c where r <= 1", new String[][] { {"0.0"} } },
	{ "select r from c where r >= r", new String[][] { {"0.0"},{"2.0"},{"1956475.0"} } },
	{ "select r from c where r <= i", new String[][] { {"0.0"},{"1956475.0"} } },
	{ "select r from c where r < s", new String[0][0] },
	{ "select r from c where r > i", new String[][] { {"2.0"} } },
	{ "select r from c where r >= s", new String[][] { {"0.0"},{"2.0"},{"1956475.0"} } },
	{ "select r from c where r <> i", new String[][] { {"2.0"} } },
	{ "select r from c where r = s", new String[][] { {"0.0"} } },
	{ "select r from c where r = d", new String[][] { {"0.0"},{"1956475.0"} } },
	{ "select r from c where r >= d", new String[][] { {"0.0"},{"2.0"},{"1956475.0"} } },
	{ "create table o (c char(10), v varchar(30), dc decimal)"+ getOffHeapSuffix(), null },
	{ "select r from c,o where r <> dc", new String[0][0] },
	{ "drop table c", null },
	{ "drop table o", null },
	{ "create table source (i int, s smallint, c char(10), v varchar(50),	d double precision, r real)"+ getOffHeapSuffix(), null },
	{ "create table target (t real not null)"+ getOffHeapSuffix(), null },
	{ "insert into source values (1, 2, '3', '4', 5, 6)", null },
	{ "insert into target select i from source", null },
	{ "insert into target select s from source", null },
	{ "insert into target select d from source", null },
	{ "insert into target select r from source", null },
	{ "delete from source", null },
	{ "insert into source values (null, null, null, null, null, null)", null },
	{ "insert into source values (1, 2, '3', '4', 5, 6)", null },
	{ "insert into target values(null)", "23502" },
	{ "insert into target select i from source", "23502" },
	{ "insert into target select s from source", "23502" },
	{ "insert into target select d from source", "23502" },
	{ "insert into target select r from source", "23502" },
	{ "select * from target", new String[][] { {"1.0"},{"2.0"},{"5.0"},{"6.0"} } },
	{ "update target set t = t + 1", null },
	{ "select * from target", new String[][] { {"2.0"},{"3.0"},{"6.0"},{"7.0"} } },
	{ "update target set t = t - 1", null },
	{ "select * from target", new String[][] { {"1.0"},{"2.0"},{"5.0"},{"6.0"} } },
	{ "update target set t = t / 10", null },
	{ "select * from target", new String[][] { {"0.1"},{"0.2"},{"0.5"},{"0.6"} } },
	{ "update target set t = t * 10", null },
	{ "select * from target", new String[][] { {"1.0"},{"2.0"},{"5.0"},{"6.0"} } },
	{ "update source set r = 1.4e4", null },
	{ "update source set i = r, s=r, d=r", null },
	//FIXME
	//GemFireXD throws cast exception for INTEGER column I
	//{ "select i, s, d from source where i=1.4e4 or s=1.4e4 or d=1.4e4", new String[][] {
	//	{"14000","14000","14000.0"},
	//	{"14000","14000","14000.0"} } },
	{ "update source set i = r, r = 0, s = r", null },
	{ "select i, r, s from source where r = 0", new String[][] {
		{"14000","0.0","14000"},
		{"14000","0.0","14000"} } },
	{ "update source set r = 1.4e12", null },
	{ "update source set i = r", "22003" },
	{ "update source set s = r", "22003" },
	{ "drop table source", null },
	{ "drop table target", null },
	{ "create table fake(r real)"+ getOffHeapSuffix(), null },
	{ "values 5e-325", "22003" },
	{ "values 5e-324", "22003" },
	{ "insert into fake values( -3.402E+38 )", null },
	{ "insert into fake values( +3.402E+38 )", null },
	{ "insert into fake values -1", null },
	{ "insert into fake values( -1.175E-37 )", null },
	{ "insert into fake values( +1.175E-37 )", null },
	{ "insert into fake values -2", null },
	{ "insert into fake values( -3.4028235E38 )", "22003" },
	{ "insert into fake values( +3.4028235E38 )", "22003" },
	{ "insert into fake values -3", null },
	{ "insert into fake values( -1.4E-45 )", "22003" },
	{ "insert into fake values( +1.4E-45 )", "22003" },
	{ "insert into fake values -4", null },
	{ "insert into fake values (+0)", null },
	{ "insert into fake values (+0.0)", null },
	{ "insert into fake values (+0.0E-37)", null },
	{ "insert into fake values (+0.0E-38)", null },
	{ "insert into fake values (+0.0E-500)", null },
	{ "values (+0.0E-500)", new String[][] { {"0.0"} } },
	{ "values (+1.0E-300)", new String[][] { {"1.0E-300"} } },
	{ "insert into fake values (+1.0E-300)", "22003" },
	{ "insert into fake values (cast(+1.0E-900 as real))", "22003" },
	{ "values (cast(+1.0E-300 as real))", "22003" },
	{ "values (+1.0E-900)", "22003" },
	{ "values (cast(+1.0E-900 as real))", "22003" },
	{ "insert into fake values -11", null },
	{ "insert into fake values( -3.4019E+38 )", null },
	{ "insert into fake values( -3.4021E+38 )", "22003" },
	{ "insert into fake values -21", null },
	{ "insert into fake values( +3.4019E+38 )", null },
	{ "insert into fake values( +3.4021E+38 )", "22003" },
	{ "insert into fake values -22", null },
	{ "insert into fake values( -1.1749E-37 )", "22003" },
	{ "insert into fake values( -1.1751E-37 )", null },
	{ "insert into fake values -23", null },
	{ "insert into fake values( +1.1749E-37 )", "22003" },
	{ "insert into fake values( +1.1751E-37 )", null },
	{ "insert into fake values -24", null },
	{ "insert into fake values( -3.4028234E38 )", "22003" },
	{ "insert into fake values( -3.40282349E38 )", "22003" },
	{ "insert into fake values( -3.40282351E38 )", "22003" },
	{ "insert into fake values( -3.4028236E38 )", "22003" },
	{ "insert into fake values -25", null },
	{ "insert into fake values( +3.4028234E38 )", "22003" },
	{ "insert into fake values( +3.40282349E38 )", "22003" },
	{ "insert into fake values( +3.40282351E38 )", "22003" },
	{ "insert into fake values( +3.4028236E38 )", "22003" },
	{ "insert into fake values -26", null },
	{ "insert into fake values( -1.39E-45 )", "22003" },
	{ "insert into fake values( -1.399E-45 )", "22003" },
	{ "insert into fake values( -1.401E-45 )", "22003" },
	{ "insert into fake values( -1.41E-45 )", "22003" },
	{ "insert into fake values -27", null },
	{ "insert into fake values( +1.39E-45 )", "22003" },
	{ "insert into fake values( +1.399E-45 )", "22003" },
	{ "insert into fake values( +1.401E-45 )", "22003" },
	{ "insert into fake values( +1.41E-45 )", "22003" },
	{ "insert into fake values -28", null },
	{ "select count(*) from fake", new String[][] { {"26"} } },
	{ "drop table fake", null },
	{ "create table fake(r real)"+ getOffHeapSuffix(), null },
	{ "values cast(5e-37/1e0 as real)", new String[][] { {"5.0E-37"} } },
	{ "values cast(5e-37/1e1 as real)", "22003" },
	{ "values cast(5e-37/1e300 as real)", "22003" },
	{ "values cast(5e-37 as real)/cast(1e10 as real)", "22003" },
	{ "insert into fake values 5e-37/1e0", null },
	{ "insert into fake values 5e-37/1e1", "22003" },
	{ "insert into fake values 5e-37/1e300", "22003" },
	{ "insert into fake values cast(5e-37 as real)/cast(1e10 as real)", "22003" },
	{ "drop table fake", null },
	{ "values 5e-37 / 1e300", "22003" },
	{ "values cast(5e-37 / 1e300 as real)", "22003" },
	{ "values cast(cast(0.0e0 as real) - cast(0.0e0 as real) as real)", new String[][] { {"0.0"} } },
	{ "values cast(cast(1.0e-30 as real) - cast(1.0e-30 as real) as real)", new String[][] { {"0.0"} } },
	{ "values cast(cast(5e-37 as real) - cast(4e-37 as real) as real)", "22003" },
	{ "values cast(5e-37 - 4e-37 as real)", "22003" },
	{ "values cast(5e-37 - 4.99e-37 as real)", "22003" },
	{ "values cast(5e-308 - 4e-308 as real)", "22003" },
	{ "values cast(5e-37 + -4e-37 as real)", "22003" },
	{ "values cast(5e-324 - 4e-324 as real)", "22003" },
	{ "values cast(5e-37 * 4e-37 as real)", "22003" },
	{ "values cast(cast(5e-37 as real) * cast(4e-37 as real) as real)", "22003" },
	{ "values cast(5e-300 * 4e-300 as real)", "22003" },
	{ "values -3e-305/1e100", "22003" },
	{ "values -3e-305/1e100", "22003" },
	{ "values 0.0e5/-1", new String[][] { {"0.0"} } },
	{ "values 01234567890123456789012345678e1", "42820" },
	{ "values 0123456789012345678901234567e1", new String[][] { {"1.2345678901234569E27"} } },
	{ "create table t1 (c1 real)"+ getOffHeapSuffix(), null },
	{ "insert into t1 values -1.40129846432481700e-46", "22003" },
	{ "insert into t1 values +1.40129846432481700e-46", "22003" },
	{ "select * from t1", new String[0][0] },
	{ "insert into t1 values 3.40282346638528860e+38", "22003" },
	{ "insert into t1 values -3.40282346638528860e+38", "22003" },
	{ "select * from t1", new String[0][0] },
	{ "drop table t1", null },
	{ "create table tiger(d decimal(12,11))"+ getOffHeapSuffix(), null },
	{ "insert into tiger values (1.234)", null },
	{ "insert into tiger values (0.1234)", null },
	{ "insert into tiger values (0.01234)", null },
	{ "insert into tiger values (0.001234)", null },
	{ "insert into tiger values (0.001234)", null },
	{ "insert into tiger values (0.0001234)", null },
	{ "insert into tiger values (0.00001234)", null },
	{ "insert into tiger values (0.000001234)", null },
	{ "insert into tiger values (0.0000001234)", null },
	{ "insert into tiger values (0.00000001234)", null },
	{ "insert into tiger values (0.00000001234)", null },
	{ "select d from tiger order by 1", new String[][] { {"0.00000001234"},{"0.00000001234"},
		{"0.00000012340"},{"0.00000123400"},{"0.00001234000"},{"0.00012340000"},
		{"0.00123400000"},{"0.00123400000"},{"0.01234000000"},{"0.12340000000"},{"1.23400000000"} } },
	{ "values cast ('1e+0' as DECIMAL(6,2))", new String[][] { {"1.00"} } },
	{ "values cast ('+-1e+1' as DECIMAL(6,2))", "22018" },
	{ "values cast ('-1e+1' as DECIMAL(6,2))", new String[][] { {"-10.00"} } },
	{ "values cast ('-1e-1' as DECIMAL(6,2))", new String[][] { {"-0.10"} } },
	{ "values cast ('-1e-+1' as DECIMAL(6,2))", "22018" },
	{ "values cast ('-1e--1' as DECIMAL(6,2))", "22018" },
	{ "values cast ('-1e+-1' as DECIMAL(6,2))", "22018" },
	{ "values cast ('-1e+-1' as DECIMAL(6,2))", "22018" },
	{ "values cast ('1.0e' as DECIMAL(6,2))", "22018" },
	{ "values cast ('1.0e+' as DECIMAL(6,2))", "22018" },
	{ "values cast ('1.0e-' as DECIMAL(6,2))", "22018" },
	{ "values cast ('1.0ee' as DECIMAL(6,2))", "22018" },
	{ "values cast ('123.' as DECIMAL(6,2))", new String[][] { {"123.00"} } },
	{ "values cast ('1e' as DECIMAL(6,2))", "22018" },
	{ "values cast ('1e1.0' as DECIMAL(6,2))", "22018" },
	{ "values cast ('.3' as DECIMAL(6,2))", new String[][] { {"0.30"} } },
	{ "values cast('' as DECIMAL(6,2))", "22018" }
    };

    Connection conn = TestUtil.getConnection();
    conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    conn.setAutoCommit(true);
    Statement stmt = conn.createStatement();
    addExpectedException(new Object[] { "22003", EntryExistsException.class });
    // Go through the array, execute each string[0], check sqlstate [1]
    // This will fail on the first one that succeeds where it shouldn't
    // or throws unknown exception
    JDBC.SQLUnitTestHelper(stmt,Script_FloatTypesUTPartitioning);
    conn.commit();
    removeExpectedException(new Object[] { "22003",
        EntryExistsException.class });
  }
  
  protected String getOffHeapSuffix() {
    return "  ";
  }
}
