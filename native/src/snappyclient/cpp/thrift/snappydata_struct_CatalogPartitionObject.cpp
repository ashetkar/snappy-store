/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "snappydata_struct_CatalogPartitionObject.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace io { namespace snappydata { namespace thrift {


CatalogPartitionObject::~CatalogPartitionObject() noexcept {
}


void CatalogPartitionObject::__set_spec(const std::map<std::string, std::string> & val) {
  this->spec = val;
}

void CatalogPartitionObject::__set_storage(const CatalogStorage& val) {
  this->storage = val;
}

void CatalogPartitionObject::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

uint32_t CatalogPartitionObject::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_spec = false;
  bool isset_storage = false;
  bool isset_parameters = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->spec.clear();
            uint32_t _size414;
            ::apache::thrift::protocol::TType _ktype415;
            ::apache::thrift::protocol::TType _vtype416;
            xfer += iprot->readMapBegin(_ktype415, _vtype416, _size414);
            uint32_t _i418;
            for (_i418 = 0; _i418 < _size414; ++_i418)
            {
              std::string _key419;
              xfer += iprot->readString(_key419);
              std::string& _val420 = this->spec[_key419];
              xfer += iprot->readString(_val420);
            }
            xfer += iprot->readMapEnd();
          }
          isset_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->storage.read(iprot);
          isset_storage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameters.clear();
            uint32_t _size421;
            ::apache::thrift::protocol::TType _ktype422;
            ::apache::thrift::protocol::TType _vtype423;
            xfer += iprot->readMapBegin(_ktype422, _vtype423, _size421);
            uint32_t _i425;
            for (_i425 = 0; _i425 < _size421; ++_i425)
            {
              std::string _key426;
              xfer += iprot->readString(_key426);
              std::string& _val427 = this->parameters[_key426];
              xfer += iprot->readString(_val427);
            }
            xfer += iprot->readMapEnd();
          }
          isset_parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_storage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_parameters)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CatalogPartitionObject::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CatalogPartitionObject");

  xfer += oprot->writeFieldBegin("spec", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->spec.size()));
    std::map<std::string, std::string> ::const_iterator _iter428;
    for (_iter428 = this->spec.begin(); _iter428 != this->spec.end(); ++_iter428)
    {
      xfer += oprot->writeString(_iter428->first);
      xfer += oprot->writeString(_iter428->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("storage", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->storage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
    std::map<std::string, std::string> ::const_iterator _iter429;
    for (_iter429 = this->parameters.begin(); _iter429 != this->parameters.end(); ++_iter429)
    {
      xfer += oprot->writeString(_iter429->first);
      xfer += oprot->writeString(_iter429->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CatalogPartitionObject &a, CatalogPartitionObject &b) {
  using ::std::swap;
  swap(a.spec, b.spec);
  swap(a.storage, b.storage);
  swap(a.parameters, b.parameters);
}

CatalogPartitionObject::CatalogPartitionObject(const CatalogPartitionObject& other430) {
  spec = other430.spec;
  storage = other430.storage;
  parameters = other430.parameters;
}
CatalogPartitionObject::CatalogPartitionObject( CatalogPartitionObject&& other431) noexcept {
  spec = std::move(other431.spec);
  storage = std::move(other431.storage);
  parameters = std::move(other431.parameters);
}
CatalogPartitionObject& CatalogPartitionObject::operator=(const CatalogPartitionObject& other432) {
  spec = other432.spec;
  storage = other432.storage;
  parameters = other432.parameters;
  return *this;
}
CatalogPartitionObject& CatalogPartitionObject::operator=(CatalogPartitionObject&& other433) noexcept {
  spec = std::move(other433.spec);
  storage = std::move(other433.storage);
  parameters = std::move(other433.parameters);
  return *this;
}
void CatalogPartitionObject::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CatalogPartitionObject(";
  out << "spec=" << to_string(spec);
  out << ", " << "storage=" << to_string(storage);
  out << ", " << "parameters=" << to_string(parameters);
  out << ")";
}

}}} // namespace
