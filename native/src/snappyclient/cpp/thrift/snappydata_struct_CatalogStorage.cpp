/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "snappydata_struct_CatalogStorage.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace io { namespace snappydata { namespace thrift {


CatalogStorage::~CatalogStorage() noexcept {
}


void CatalogStorage::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
}

void CatalogStorage::__set_compressed(const bool val) {
  this->compressed = val;
}

void CatalogStorage::__set_locationUri(const std::string& val) {
  this->locationUri = val;
__isset.locationUri = true;
}

void CatalogStorage::__set_inputFormat(const std::string& val) {
  this->inputFormat = val;
__isset.inputFormat = true;
}

void CatalogStorage::__set_outputFormat(const std::string& val) {
  this->outputFormat = val;
__isset.outputFormat = true;
}

void CatalogStorage::__set_serde(const std::string& val) {
  this->serde = val;
__isset.serde = true;
}

uint32_t CatalogStorage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_properties = false;
  bool isset_compressed = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
            uint32_t _size312;
            ::apache::thrift::protocol::TType _ktype313;
            ::apache::thrift::protocol::TType _vtype314;
            xfer += iprot->readMapBegin(_ktype313, _vtype314, _size312);
            uint32_t _i316;
            for (_i316 = 0; _i316 < _size312; ++_i316)
            {
              std::string _key317;
              xfer += iprot->readString(_key317);
              std::string& _val318 = this->properties[_key317];
              xfer += iprot->readString(_val318);
            }
            xfer += iprot->readMapEnd();
          }
          isset_properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->compressed);
          isset_compressed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locationUri);
          this->__isset.locationUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->inputFormat);
          this->__isset.inputFormat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->outputFormat);
          this->__isset.outputFormat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serde);
          this->__isset.serde = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_properties)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_compressed)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CatalogStorage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CatalogStorage");

  xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
    std::map<std::string, std::string> ::const_iterator _iter319;
    for (_iter319 = this->properties.begin(); _iter319 != this->properties.end(); ++_iter319)
    {
      xfer += oprot->writeString(_iter319->first);
      xfer += oprot->writeString(_iter319->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compressed", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->compressed);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.locationUri) {
    xfer += oprot->writeFieldBegin("locationUri", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->locationUri);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.inputFormat) {
    xfer += oprot->writeFieldBegin("inputFormat", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->inputFormat);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outputFormat) {
    xfer += oprot->writeFieldBegin("outputFormat", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->outputFormat);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serde) {
    xfer += oprot->writeFieldBegin("serde", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->serde);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CatalogStorage &a, CatalogStorage &b) {
  using ::std::swap;
  swap(a.properties, b.properties);
  swap(a.compressed, b.compressed);
  swap(a.locationUri, b.locationUri);
  swap(a.inputFormat, b.inputFormat);
  swap(a.outputFormat, b.outputFormat);
  swap(a.serde, b.serde);
  swap(a.__isset, b.__isset);
}

CatalogStorage::CatalogStorage(const CatalogStorage& other320) {
  properties = other320.properties;
  compressed = other320.compressed;
  locationUri = other320.locationUri;
  inputFormat = other320.inputFormat;
  outputFormat = other320.outputFormat;
  serde = other320.serde;
  __isset = other320.__isset;
}
CatalogStorage::CatalogStorage( CatalogStorage&& other321) noexcept {
  properties = std::move(other321.properties);
  compressed = std::move(other321.compressed);
  locationUri = std::move(other321.locationUri);
  inputFormat = std::move(other321.inputFormat);
  outputFormat = std::move(other321.outputFormat);
  serde = std::move(other321.serde);
  __isset = std::move(other321.__isset);
}
CatalogStorage& CatalogStorage::operator=(const CatalogStorage& other322) {
  properties = other322.properties;
  compressed = other322.compressed;
  locationUri = other322.locationUri;
  inputFormat = other322.inputFormat;
  outputFormat = other322.outputFormat;
  serde = other322.serde;
  __isset = other322.__isset;
  return *this;
}
CatalogStorage& CatalogStorage::operator=(CatalogStorage&& other323) noexcept {
  properties = std::move(other323.properties);
  compressed = std::move(other323.compressed);
  locationUri = std::move(other323.locationUri);
  inputFormat = std::move(other323.inputFormat);
  outputFormat = std::move(other323.outputFormat);
  serde = std::move(other323.serde);
  __isset = std::move(other323.__isset);
  return *this;
}
void CatalogStorage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CatalogStorage(";
  out << "properties=" << to_string(properties);
  out << ", " << "compressed=" << to_string(compressed);
  out << ", " << "locationUri="; (__isset.locationUri ? (out << to_string(locationUri)) : (out << "<null>"));
  out << ", " << "inputFormat="; (__isset.inputFormat ? (out << to_string(inputFormat)) : (out << "<null>"));
  out << ", " << "outputFormat="; (__isset.outputFormat ? (out << to_string(outputFormat)) : (out << "<null>"));
  out << ", " << "serde="; (__isset.serde ? (out << to_string(serde)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
